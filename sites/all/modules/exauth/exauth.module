<?php

//make sure the openid function that i'm trying to use is included
module_load_include('inc', 'openid', 'openid');

function exauth_help($path, $arg) {
  $output = '';
  switch($path) {
    case "admin/help#exauth":
      $output = '<p>'. t(" require extensionid authentication for all visitors").'</p>';
    break;
  }
  return $output;
}

//check to see if the user is accessing a cop-created "article". these are the only pages currently classified as "protected"
function accessing_protected_page($node_type)
{
  if ($node_type == 'article'){
    return TRUE;
  }
  return FALSE;
}

//maintenance mode check
function maintenance_mode()
{
  if (variable_get('maintenance_mode', FALSE)){
    //syslog(LOG_WARNING, "true, maintenance_mode: ".variable_get('maintenance_mode', 'default'));
    return TRUE;
  }
  else{
    //syslog(LOG_WARNING, "false, maintenance_mode: ".variable_get('maintenance_mode', 'default'));
    return FALSE;
  }
}

/**
 * implements hook_node_view()
 * before a node is rendered for the user, check to make sure that the user is logged in before viewing a "protected" page.
 * if the user is not logged in and trying to access a protected page, then force an openid login and direct them back to that page after they authenticate.
 */
function exauth_node_view($node, $view_mode, $langcode){
  $node_type = $node->type;
  if(!user_is_logged_in() && accessing_protected_page($node_type) && !maintenance_mode()) 
  {
    global $base_url;
    $default_openidreturn = $base_url . '/openid/authenticate?destination=' . ltrim(request_uri(), "/");
    $myopenid_return = variable_get('extension_openid_return',$default_openidreturn);
    //syslog(LOG_WARNING, "openid login start");
    openid_begin("https://people.extension.org/", $myopenid_return);
  }
}

/**
 *implements hook_form_alter()
 *removes the username and password fields from login forms.
 *reset form['name]['#size'] because the OpenID module expects it to exist, and it seems to load after the exauth module does. (causes errors if it doesnt exist)
 */
function exauth_user_login_form_alter(&$form, &$form_state){
  $size = $form['name']['#size'];
  unset($form['name']);
  unset($form['pass']);
  unset($form['links']);
  $form['name']['#size'] = $size;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function exauth_form_user_login_block_alter(&$form, &$form_state) {
  exauth_user_login_form_alter($form, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function exauth_form_user_login_alter(&$form, &$form_state) {
  exauth_user_login_form_alter($form, $form_state);
}