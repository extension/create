<?php
// $Id$

/**
 * @file
 * Defines a eXtension filds field types.
 */
 
/**
 * Implements hook_help().
 */
function exfields_help($path, $arg) {
  switch ($path) {
    case 'admin/help#exfields':
      $output = '';
      $output .= '<h3>' . t('About eXtension Fields Module') . '</h3>';
      $output .= '<p>' . t('On this page we will provide help about eXtension Fields module. 
	              See the <a href="@field-help">Field module help page</a> for more 
				  information about fields.', array('@field-help' => url('admin/help/field'))) . '</p>';
      return $output;
  }
}
 
 
/***************************************************************
 * Field Type API hooks
 ***************************************************************/
 
/**
 * Implements hook_field_info().
 */
function exfields_field_info() {
  return array(
	'appraisal' => array(
	  'label' => t('eX Appraisal'),
	  'description' => t('Stores appraisal data.'),
	  'default_widget' => 'appraisalfield',
	  'default_formatter' => 'appraisalformat',
	),
	'contribution' => array(
	  'label' => t('eX Contribution'),
	  'description' => t('Stores contribution data.'),
	  'default_widget' => 'contributionfield',
	  'default_formatter' => 'contributionformat',
	),
    'relation' => array(
	  'label' => t('eX Relation'),
	  'description' => t('Stores relation data.'),
	  'default_widget' => 'relationfield',
	  'default_formatter' => 'relationformat',
	),
  );
}

/**
 * Implements hook_field_schema().
 */
function exfields_field_schema($field) {
  switch ($field['type']) {
    case 'contribution':
      $columns = array(
        'contribution_role' => array(
          'type' => 'varchar',
          'length' => 60,
          'not null' => FALSE,
        ),
		'contribution_author' => array(
          'type' => 'varchar',
          'length' => 255,
          'not null' => FALSE,
        ),
		'contribution_date' => array(
          'type' => 'int',
          'not null' => FALSE,
		  'default'  => 0,
        ),
      );
      break;
    case 'relation':
      $columns = array(
        'relation_kind' => array(
          'type' => 'varchar',
          'length' => 60,
          'not null' => FALSE,
        ),
		'relation_source' => array(
          'type' => 'varchar',
          'length' => 255,
          'not null' => FALSE,
        ),
      );
      break;
	case 'appraisal':
      $columns = array(
        'appraisal_user' => array(
          'type' => 'varchar',
          'length' => 255,
          'not null' => FALSE,
        ),
		'appraisal_level' => array(
          'type' => 'int',
          'default'  => 0,
          'not null' => FALSE,
        ),
		'appraisal_usability' => array(
          'type' => 'int',
          'default'  => 0,
          'not null' => FALSE,
        ),
		'appraisal_actionability' => array(
          'type' => 'int',
          'default'  => 0,
          'not null' => FALSE,
        ),
		'appraisal_interrelatedness' => array(
          'type' => 'int',
          'default'  => 0,
          'not null' => FALSE,
        ),
		'appraisal_differentiation' => array(
          'type' => 'int',
          'default'  => 0,
          'not null' => FALSE,
        ),
		'appraisal_relevance' => array(
          'type' => 'int',
          'default'  => 0,
          'not null' => FALSE,
        ),
		'appraisal_date' => array(
          'type' => 'int',
          'default'  => 0,
          'not null' => FALSE,
        ),
		
		
      );
      break;
  }

  return array('columns' => $columns);
}



/**
 * Implements hook_field_is_empty().
 */
function exfields_field_is_empty($item, $field) {
  switch ($field['type']) {
    case 'contribution':
      return empty($item['contribution_role']);
      break;
    case 'relation':
      return empty($item['relation_kind']);
      break;
	case 'appraisal':
      return empty($item['appraisal_user']);
      break;
  }
}

/***********************************************************************
 *  Field Type API: Formatter
 **********************************************************************/
 
/**
 * Implements hook_field_formatter_info().
 */
function exfields_field_formatter_info() {
  return array(
    'contributionformat' => array(
      'label' => t('Default'),
      'field types' => array('contribution', ),
    ),
    'relationformat' => array(
      'label' => t('Default'),
      'field types' => array('relation'),
    ),
	'appraisalformat' => array(
      'label' => t('Default'),
      'field types' => array('appraisal'),
    ),
  );
}
 
/**
 * Implements hook_field_formatter_view().
 */
function exfields_field_formatter_view($object_type, $object, $field, $instance, $langcode, $items, $display) {
  $element = array();
  
  if($display['type']=='contributionformat') {
      foreach ($items as $delta => $item) {
	    $output = t('<em>Role:</em> @role<br /><em>Author:</em> @author<br /><em>Date:</em> @date ', 
						array('@role' =>$item['contribution_role'], '@author' =>$item['contribution_author'], '@date' =>_dateToString($item['contribution_date']) ) );
        $element[$delta]['#markup'] = '<p>' . $output . '</p>';
      }
  }
  if($display['type']=='relationformat') {
      foreach ($items as $delta => $item) {
		 	$output = t('<em>Kind:</em> @kind<br /><em>Source:</em> @source', 
						array('@kind' =>$item['relation_kind'], '@source' =>$item['relation_source'] ) );
        	$element[$delta]['#markup'] = '<p>' . $output . '</p>';
      }
  }
  if($display['type']=='appraisalformat') {
      foreach ($items as $delta => $item) {
		 	$output = t('<em>Author:</em> @user<br /><em>Knowledge Level:</em> @level<br /><em>Usability:</em> @usability<br /><em>Actionability:</em> @actionability<br /><em>Interrelatedness:</em> @interrelatedness<br /><em>Differentiation:</em> @differentiation<br /><em>Relevance:</em> @relevance<br /><em>Date:</em> @date', 
						array('@user' =>$item['appraisal_user'], '@level' =>$item['appraisal_level'], '@usability' =>$item['appraisal_usability'], '@actionability' =>$item['appraisal_actionability'], '@interrelatedness' =>$item['appraisal_interrelatedness'], '@differentiation' =>$item['appraisal_differentiation'], '@relevance' =>$item['appraisal_relevance'], '@date' =>_dateToString($item['appraisal_date']), ) );
        	$element[$delta]['#markup'] = '<p>' . $output . '</p>';
      }
  }
  return $element;
}

/**************************************************************************
 * Field Type API: Widget
 **************************************************************************/
 
/**
 * Implements hook_field_widget_info().
 */
function exfields_field_widget_info() {
  return array(
    'contributionfield' => array(
	  'label' => t('Multiple Fields'),
	  'field types' => array('contribution'),
	),
    'relationfield' => array(
	  'label' => t('Multiple Fields'),
	  'field types' => array('relation'),
	),
	'appraisalfield' => array(
	  'label' => t('Multiple Fields'),
	  'field types' => array('appraisal'),
	),
  );
}


/**
 * Implements hook_field_widget_form().
 */
function exfields_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $base) {
  $element = $base;
  switch ($instance['widget']['type']) {
    case 'contributionfield':
		// Separate the timestamp of the date storage to an array of alements needed for the date widget
		$contribution_date_value = isset($items[$delta]['contribution_date']) ? _intToDateArray($items[$delta]['contribution_date']) : _intToDateArray(time());
	
	
		
       $element['contribution_role'] = array(
	  		'#title'=>'Role',
	  		 '#type' => 'select',
			 '#options' => array('' => '','author' => 'author', 'publisher' => 'publisher', 'unknown' => 'unknown', 'initiator' => 'initiator', 'terminator' => 'terminator', 'validator' => 'validator', 'editor' => 'editor', 'graphical designer' => 'graphical designer', 'technical implementor' => 'technical implementor', 'educational validator' => 'educational validator', 'script writer' => 'script writer', 'instructional designer' => 'instructional designer', 'subject matter expert' => 'subject matter expert', ),
			 '#default_value' => isset($items[$delta]['contribution_role']) ? $items[$delta]['contribution_role'] : NULL,
	  	);
		$element['contribution_author'] = array(
		'#title'=>'Author',
        '#type' => 'textfield',
        '#default_value' => isset($items[$delta]['contribution_author']) ? $items[$delta]['contribution_author'] : NULL,
      	);
		$element['contribution_date'] = array(
		'#title'=>'Date',
        '#type' => 'date',
        '#default_value' => $contribution_date_value,
		'#element_validate' => array('strToDateValidate'),
      	);
      break;
    case 'relationfield':
      $element['relation_kind'] = array(
        '#type' => 'select',
		'#options' => array('' => '','is part of' => 'is part of', 'has part' => 'has part', 'is version of' => 'is version of', 'has version' => 'has version', 'is format of' => 'is format of', 'has format' => 'has format', 'references' => 'references', 'is referenced by' => 'is referenced by', 'is based on' => 'is based on', 'is basis for' => 'is basis for', 'requires' => 'requires', 'is required by' => 'is required by',
		),		
        '#default_value' => isset($items[$delta]['relation_kind']) ? $items[$delta]['relation_kind'] : NULL,
      );
	   $element['relation_source'] = array(
        '#type' => 'textfield',
        '#default_value' => isset($items[$delta]['relation_source']) ? $items[$delta]['relation_source'] : NULL,
      );
      break;
	case 'appraisalfield':
	   $element['appraisal_user'] = array(
	   	'#title'=>'Author',
        '#type' => 'textfield',
        '#default_value' => isset($items[$delta]['appraisal_user']) ? $items[$delta]['appraisal_user'] : NULL,
      );
	  $element['appraisal_level'] = array( 
		'#type' => 'radios', 
		'#title' => t('Knowledge Level'), 
		'#default_value' => isset($items[$delta]['appraisal_level']) ? $items[$delta]['appraisal_level'] : '1', 
		'#options' => array( '1' => '1', '2' => '2', '3' => '3'),
		);
	   $element['appraisal_usability'] = array( 
		'#type' => 'radios', 
		'#title' => t('Usability'), 
		'#default_value' => isset($items[$delta]['appraisal_usability']) ? $items[$delta]['appraisal_usability'] : '1',  
		'#options' => array( '1' => '1', '2' => '2', '3' => '3'), 
		);
	   $element['appraisal_actionability'] = array( 
		'#type' => 'radios', 
		'#title' => t('Actionability'), 
		'#default_value' =>isset($items[$delta]['appraisal_actionability']) ? $items[$delta]['appraisal_actionability'] : '1',  
		'#options' => array( '1' => '1', '2' => '2', '3' => '3'), 
		);
		$element['appraisal_interrelatedness'] = array( 
		'#type' => 'radios', 
		'#title' => t('Interrelatedness'), 
		'#default_value' => isset($items[$delta]['appraisal_interrelatedness']) ? $items[$delta]['appraisal_interrelatedness'] : '1',  
		'#options' => array( '1' => '1', '2' => '2', '3' => '3'), 
		);
		$element['appraisal_differentiation'] = array( 
		'#type' => 'radios', 
		'#title' => t('Differentiation'), 
		'#default_value' => isset($items[$delta]['appraisal_differentiation']) ? $items[$delta]['appraisal_differentiation'] : '1',  
		'#options' => array( '1' => '1', '2' => '2', '3' => '3'),  
		);
		$element['appraisal_relevance'] = array( 
		'#type' => 'radios', 
		'#title' => t('Relevance'), 
		'#default_value' => isset($items[$delta]['appraisal_relevance']) ? $items[$delta]['appraisal_relevance'] : '1',  
		'#options' => array( '1' => '1', '2' => '2', '3' => '3'), 
		);
		// Separate the timestamp of the date storage to an array of alements needed for the date widget
		$appraisal_date_value = isset($items[$delta]['appraisal_date']) ? _intToDateArray($items[$delta]['appraisal_date']) : _intToDateArray(time());
		$element['appraisal_date'] = array(
		'#title'=>'Date',
        '#type' => 'date',
        '#default_value' => $appraisal_date_value,
		'#element_validate' => array('strToDateValidate'),
      	);
	  
	  
	  
      break;
  }
  return $element;
}



/**
 * Utility function which converts the 3 elements, month, day and year
 * in to a unix timestamp (number of seconds) 
 */
function strToDateValidate($element, &$form_state) {
  if (isset($element['#value'])) {
     $day = $element['#value']['day'];
     $month = $element['#value']['month'];
     $year = $element['#value']['year'];
     $value = mktime(0, 0, 0, $month, $day, $year);
     form_set_value($element, array('contribution_date' => $value), $form_state);
  }
}
/**
 * Utility function which converts a string representation of a unix timestamp
 * and converts to a human readable format.
 */
function _dateToString($dateValue) {
  $str = "Unable to Format Date";
  try {
   $timestamp = intval($dateValue);
   $str = format_date($timestamp, 'custom', 'M-d-Y');
  } catch (Exception $e) {
     $str = "Unable to Format Date" . $e->getMessage();
  }
  return $str;
}
 
 
/**
 * Utility function which converts a string representation of a unix timestamp
 * and converts to an array suitable for the Drupal date widget (3 drop down combo 
 * boxes, month, day, year).
 */
function _intToDateArray($timestr) {
  $timestamp = intval($timestr);
  $year = date('Y', $timestamp);
  $month = date('n',$timestamp);
  $day = date('j',$timestamp);
  return array('year' => $year, 'month' => $month, 'day' => $day);
}