<?php
// $Id$

/**
 * @file
 * Defines a eXtension filds field types.
 */
 
/**
 * Implements hook_help().
 */
function exfields_help($path, $arg) {
  switch ($path) {
    case 'admin/help#exfields':
      $output = '';
      $output .= '<h3>' . t('About eXtension Fields Module') . '</h3>';
      $output .= '<p>' . t('On this page we will provide help about eXtension Fields module. 
	              See the <a href="@field-help">Field module help page</a> for more 
				  information about fields.', array('@field-help' => url('admin/help/field'))) . '</p>';
      return $output;
  }
}
 
 
/***************************************************************
 * Field Type API hooks
 ***************************************************************/
 
/**
 * Implements hook_field_info().
 */
function exfields_field_info() {
  return array(
	'appraisal' => array(
	  'label' => t('eX Appraisal'),
	  'description' => t('Stores appraisal data.'),
	  'default_widget' => 'appraisalfield',
	  'default_formatter' => 'appraisalformat',
	),
	'contribution' => array(
	  'label' => t('eX Contribution'),
	  'description' => t('Stores contribution data.'),
	  'default_widget' => 'contributionfield',
	  'default_formatter' => 'contributionformat',
	),
    'relation' => array(
	  'label' => t('eX Relation'),
	  'description' => t('Stores relation data.'),
	  'default_widget' => 'relationfield',
	  'default_formatter' => 'relationformat',
	),
  );
}

/**
 * Implements hook_field_schema().
 */
function exfields_field_schema($field) {
  switch ($field['type']) {
    case 'contribution':
	//***********************************************//
	// schema definitions for the contributions field
	//***********************************************//
      $columns = array(
        'contribution_role' => array(
          'type' => 'varchar',
          'length' => 60,
          'not null' => FALSE,
        ),
		'contribution_author' => array(
          'type' => 'varchar',
          'length' => 255,
          'not null' => FALSE,
        ),
		'contribution_date' => array(
          'type' => 'int',
          'not null' => FALSE,
		  'default'  => 0,
        ),
      );
      break;
    case 'relation':
	//***********************************************//
	// schema definitions for the relation field
	//***********************************************//
      $columns = array(
        'relation_kind' => array(
          'type' => 'varchar',
          'length' => 60,
          'not null' => FALSE,
        ),
		'relation_source' => array(
          'type' => 'varchar',
          'length' => 255,
          'not null' => FALSE,
        ),
      );
      break;
	case 'appraisal':
	//***********************************************//
	// schema definitions for the appraisal field
	//***********************************************//
      $columns = array(
        'appraisal_user' => array(
          'type' => 'varchar',
          'length' => 255,
          'not null' => FALSE,
        ),
		'appraisal_unique' => array(
          'type' => 'int',
          'default'  => 0,
          'not null' => FALSE,
        ),
		'appraisal_keywords' => array(
          'type' => 'int',
          'default'  => 0,
          'not null' => FALSE,
        ),
		'appraisal_organization' => array(
          'type' => 'int',
          'default'  => 0,
          'not null' => FALSE,
        ),
		'appraisal_links' => array(
          'type' => 'int',
          'default'  => 0,
          'not null' => FALSE,
        ),
		'appraisal_action' => array(
          'type' => 'int',
          'default'  => 0,
          'not null' => FALSE,
        ),
		'appraisal_overall' => array(
          'type' => 'int',
          'default'  => 0,
          'not null' => FALSE,
        ),
		'appraisal_note' => array(
          'type' => 'text',
          'not null' => FALSE,
        ),
		'appraisal_date' => array(
          'type' => 'varchar',
		  'length' => 25,
          'not null' => FALSE,
        ),
		'improvements_date' => array(
          'type' => 'varchar',
		  'length' => 25,
          'not null' => FALSE,
        ),
		
		
      );
      break;
  }

  return array('columns' => $columns);
}



/**
 * Implements hook_field_is_empty().
 */
function exfields_field_is_empty($item, $field) {
  switch ($field['type']) {
    case 'contribution':
      return empty($item['contribution_role']);
      break;
    case 'relation':
      return empty($item['relation_kind']);
      break;
	case 'appraisal':
      return empty($item['appraisal_user']);
      break;
  }
}

/***********************************************************************
 *  Field Type API: Formatter
 **********************************************************************/
 
/**
 * Implements hook_field_formatter_info().
 */
function exfields_field_formatter_info() {
  return array(
    'contributionformat' => array(
      'label' => t('Default'),
      'field types' => array('contribution', ),
    ),
    'relationformat' => array(
      'label' => t('Default'),
      'field types' => array('relation'),
    ),
	'appraisalformat' => array(
      'label' => t('Default'),
      'field types' => array('appraisal'),
    ),
  );
}
 
/**
 * Implements hook_field_formatter_view().
 */
function exfields_field_formatter_view($object_type, $object, $field, $instance, $langcode, $items, $display) {
  $element = array();
  
  if($display['type']=='contributionformat') {
      foreach ($items as $delta => $item) {
	    $output = t('<em>Role:</em> @role<br /><em>Author:</em> @author<br /><em>Date:</em> @date ', 
						array('@role' =>$item['contribution_role'], '@author' =>$item['contribution_author'], '@date' =>_dateToString($item['contribution_date']) ) );
        $element[$delta]['#markup'] = '<p>' . $output . '</p>';
      }
  }
  if($display['type']=='relationformat') {
      foreach ($items as $delta => $item) {
		 	$output = t('<em>Kind:</em> @kind<br /><em>Source:</em> @source', 
						array('@kind' =>$item['relation_kind'], '@source' =>$item['relation_source'] ) );
        	$element[$delta]['#markup'] = '<p>' . $output . '</p>';
      }
  }
  if($display['type']=='appraisalformat') {
      foreach ($items as $delta => $item) {
		  	
		 	$output = t('<em>Apraiser:</em> @user<br /><em>Unique Content:</em> @unique<br /><em>Keyword Usage:</em> @keywords<br /><em>Content Organization:</em> @organization<br /><em>Links to Complimentary Content:</em> @links<br /><em>Call to Action:</em> @action<br /><em>Overall Article Appraisal Score:</em> @overall<br /><em>Note:</em> @note<br /><em>Appraisal Date:</em> @date<br /><em>Content Improvements Date Completed:</em> @improvements_date', 
						array('@user' =>$item['appraisal_user'], '@organization' =>$item['appraisal_organization'], '@keywords' =>$item['appraisal_keywords'], '@action' =>$item['appraisal_action'], '@links' =>$item['appraisal_links'], '@overall' =>$item['appraisal_overall'], '@unique' =>$item['appraisal_unique'], '@note' =>$item['appraisal_note'],'@date' => _dateToStringAppraisal($item['appraisal_date']), '@improvements_date' => _dateToStringAppraisal($item['improvements_date']), ) );
        	$element[$delta]['#markup'] = '<p>' . $output . '</p>';
      }
  }
  return $element;
}

/**************************************************************************
 * Field Type API: Widget
 **************************************************************************/
 
/**
 * Implements hook_field_widget_info().
 */
function exfields_field_widget_info() {
  return array(
    'contributionfield' => array(
	  'label' => t('Multiple Fields'),
	  'field types' => array('contribution'),
	),
    'relationfield' => array(
	  'label' => t('Multiple Fields'),
	  'field types' => array('relation'),
	),
	'appraisalfield' => array(
	  'label' => t('Multiple Fields'),
	  'field types' => array('appraisal'),
	),
  );
}


/**
 * Implements hook_field_widget_form().
 */
function exfields_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $base) {
  $element = $base;
  switch ($instance['widget']['type']) {
    case 'contributionfield':
	//***********************************************//
	// widget definitions for the contributions field
	//***********************************************//
	
	
	
		// Separate the timestamp of the date storage to an array of alements needed for the date widget
		$contribution_date_value = isset($items[$delta]['contribution_date']) ? _intToDateArray($items[$delta]['contribution_date']) : _intToDateArray(time());
	
       $element['contribution_role'] = array(
	  		'#title'=>'Role',
	  		 '#type' => 'select',
			 '#options' => array('' => '','author' => 'author', 'publisher' => 'publisher', 'unknown' => 'unknown', 'initiator' => 'initiator', 'terminator' => 'terminator', 'validator' => 'validator', 'editor' => 'editor', 'graphical designer' => 'graphical designer', 'technical implementor' => 'technical implementor', 'educational validator' => 'educational validator', 'script writer' => 'script writer', 'instructional designer' => 'instructional designer', 'subject matter expert' => 'subject matter expert', ),
			 '#default_value' => isset($items[$delta]['contribution_role']) ? $items[$delta]['contribution_role'] : NULL,
	  	);
		$element['contribution_author'] = array(
		'#title'=>'Author',
        '#type' => 'textfield',
        '#default_value' => isset($items[$delta]['contribution_author']) ? $items[$delta]['contribution_author'] : NULL,
      	);
		$element['contribution_date'] = array(
		'#title'=>'Date',
        '#type' => 'date',
        '#default_value' => $contribution_date_value,
		'#element_validate' => array('strToDateValidate'),
      	);
      break;
    case 'relationfield':
	//***********************************************//
	// widget definitions for the relation field
	//***********************************************//
      $element['relation_kind'] = array(
        '#type' => 'select',
		'#options' => array('' => '','is part of' => 'is part of', 'has part' => 'has part', 'is version of' => 'is version of', 'has version' => 'has version', 'is format of' => 'is format of', 'has format' => 'has format', 'references' => 'references', 'is referenced by' => 'is referenced by', 'is based on' => 'is based on', 'is basis for' => 'is basis for', 'requires' => 'requires', 'is required by' => 'is required by',
		),		
        '#default_value' => isset($items[$delta]['relation_kind']) ? $items[$delta]['relation_kind'] : NULL,
      );
	   $element['relation_source'] = array(
        '#type' => 'textfield',
        '#default_value' => isset($items[$delta]['relation_source']) ? $items[$delta]['relation_source'] : NULL,
      );
      break;
	case 'appraisalfield':
	//***********************************************//
	// widget definitions for the apprisal field
	//***********************************************//
	   $element['appraisal_user'] = array(
	   	'#title'=>'Appraiser',
        '#type' => 'textfield',
        '#default_value' => isset($items[$delta]['appraisal_user']) ? $items[$delta]['appraisal_user'] : NULL,
      );
	  $element['appraisal_unique'] = array( 
		'#type' => 'radios', 
		'#description' => t('Does the page fill a unique need, providing information or perspective that is not readily available elsewhere and is the content up-to-date and of current interest to a national audience?<br />
		1 - Low. Topic is better covered elsewhere, and page doesn\'t contribute to a strong body of content for the CoP and/or may be outdated,or  no longer relevant.<br />
		2 - Medium. Information is generally known or topic is covered eleswhere, but page provides some modest benefit over other sources, or contributes to providing comprehensive information in the CoP. And/Or appears dated/stale or is of interest only to a small geographic area.<br />
		3 - High. Page offers a unique perspective, information not widely known, or better explanations than other sources. Timely or "evergreen" content.'), 
		'#title' => t('Unique Content'), 
		'#default_value' => isset($items[$delta]['appraisal_unique']) ? $items[$delta]['appraisal_unique'] : '1',  
		'#options' => array( '1' => '1', '2' => '2', '3' => '3'), 
		);
	   $element['appraisal_keywords'] = array( 
		'#type' => 'radios', 
		'#description' => t('Are Keywords presented effectively? Does the content make use of keywords in Page Titles, Intro Summary Sentences and the Body of Articles and Sub-Headings?<br />
		1 - Low. Keywords not in Page Titles, Intro summary sentences and body of article and subheadings.<br />
		2 - Medium. Some Keywords but none in certain areas where they could be present.<br />
		3 - High. No significant problems.'), 
		'#title' => t('Keyword Usage'), 
		'#default_value' => isset($items[$delta]['appraisal_keywords']) ? $items[$delta]['appraisal_keywords'] : '1',  
		'#options' => array( '1' => '1', '2' => '2', '3' => '3'), 
		);
		$element['appraisal_organization'] = array( 
		'#type' => 'radios',
		'#description' => t('Is the content presented effectively?  is it readable, scannable and of appropriate scope and length? Does it make use of bulleted or numbered lists where appropriate?  Is there appropriate use of bold face type?  Are images used to enhance understanding?<br />
		1 - Low. Numerous minor problems, a few moderate problems, or one major problem that seriously interferes with the content.<br />
		2 - Medium. Minor to moderate problems(s).<br />
		3 - High. No significant problems'), 
		'#title' => t('Content Organization.'), 
		'#default_value' => isset($items[$delta]['appraisal_organization']) ? $items[$delta]['appraisal_organization'] : '1', 
		'#options' => array( '1' => '1', '2' => '2', '3' => '3'),
		);
		$element['appraisal_links'] = array( 
		'#type' => 'radios', 
		'#description' => t('Does this content fit well with, and link to, other CoP content?<br />
		1 - Low. Poor fit in topic or tone, or lack of links to other CoP content.<br />
		2 - Medium. Some broken links to other CoP content; lack of tagging; tone or topic needs minor adjustments.<br />
		3 - High. Fits well in CoP;  good tags;  links to other CoP content.'), 
		'#title' => t('Links to Complimentary Content'), 
		'#default_value' => isset($items[$delta]['appraisal_links']) ? $items[$delta]['appraisal_links'] : '1',  
		'#options' => array( '1' => '1', '2' => '2', '3' => '3'), 
		);
	   $element['appraisal_action'] = array( 
		'#type' => 'radios', 
		'#description' => t('Does the page provide a clear next step for its current audience, and does it facilitate that step?<br />
			1- Low. No next steps given.<br />
			2 - Medium. Next step is implied or vague;  next step depends on a link that is broken; indirect or absent call to action.<br />
			3 - High. Next step is clear, specific, and stated explicitly;  effective call to action.  If instructional content, instructions are broken out into clear, logical steps.'), 
		'#title' => t('Call to Action'), 
		'#default_value' =>isset($items[$delta]['appraisal_action']) ? $items[$delta]['appraisal_action'] : '1',  
		'#options' => array( '1' => '1', '2' => '2', '3' => '3'), 
		);
		$element['appraisal_overall'] = array( 
		'#type' => 'radios', 
		'#title' => t('Overall Article Appraisal Score'), 
		'#default_value' => isset($items[$delta]['appraisal_overall']) ? $items[$delta]['appraisal_overall'] : '1',  
		'#options' => array( '1' => '1', '2' => '2', '3' => '3'),  
		);
		$element['appraisal_note'] = array( 
		'#type' => 'textarea', 
		'#title' => t('Notes'), 
		'#default_value' => isset($items[$delta]['note']) ? $items[$delta]['note'] : '', 
		);
		// Separate the timestamp of the date storage to an array of alements needed for the date widget
		$appraisal_date_value = isset($items[$delta]['appraisal_date']) ? $items[$delta]['appraisal_date'] : '';
		$element['appraisal_date'] = array(
		'#title'=>'Appraisal Date',
        '#type' => 'date_popup',
		'#date_type' => DATE_DATETIME,
		'#date_format' => variable_get('date_format_short', 'm/d/Y'),
        '#default_value' => $appraisal_date_value,
      	);
		// Separate the timestamp of the date storage to an array of alements needed for the date widget
		$improvements_date_value = isset($items[$delta]['appraisal_date']) ? $items[$delta]['appraisal_date'] : '';
		$element['improvements_date'] = array(
		'#title'=>'Content Improvements Date Complited',
        '#type' => 'date_popup',
		'#date_type' => DATE_DATETIME,
		'#date_format' => variable_get('date_format_short', 'm/d/Y'),
        '#default_value' => $improvements_date_value,
      	);
	  
	  
	  
      break;
  }
  return $element;
}



/**
 * Utility function which converts the 3 elements, month, day and year
 * in to a unix timestamp (number of seconds) 
 */
function strToDateValidate($element, &$form_state) {
  if (isset($element['#value'])) {
     $day = $element['#value']['day'];
     $month = $element['#value']['month'];
     $year = $element['#value']['year'];
     $value = mktime(0, 0, 0, $month, $day, $year);
     form_set_value($element, array('contribution_date' => $value), $form_state);
  }
}


/**
 * Utility function which converts the 3 elements, month, day and year
 * in to a unix timestamp (number of seconds) for the appraisal date
 */
function strToDateValidateAppraisal($element, &$form_state) {
  if (isset($element['#value'])) {
	 
	 $dt = explode('/', $element['#value']['date']);
     $value = mktime(0, 0, 0, $dt[0], $dt[1], $dt[2]);
     form_set_value($element, array('appraisal_date' => $value), $form_state);
	 //drupal_set_message(print_r($form_state, true));
  }
}



/**
 * Utility function which converts a string representation of a unix timestamp
 * and converts to a human readable format.
 */
function _dateToString($dateValue) {
  $str = "Unable to Format Date";
  try {
   $timestamp = intval($dateValue);
   $str = format_date($timestamp, 'custom', 'M-d-Y');
  } catch (Exception $e) {
     $str = "Unable to Format Date" . $e->getMessage();
  }
  return $str;
}

function _dateToStringAppraisal($dateValue) {
  $str = "Unable to Format Date";
  try {
	 	if($dateValue != ''){
			$dt = explode('-', $dateValue);
			$str = $dt[1].'/'.$dt[2].'/'.$dt[0];
		}else{
			$str = '';
		}
  } catch (Exception $e) {
     $str = "Unable to Format Date" . $e->getMessage();
  }
  return $str;
}


 
/**
 * Utility function which converts a string representation of a unix timestamp
 * and converts to an array suitable for the Drupal date widget (3 drop down combo 
 * boxes, month, day, year).
 */
function _intToDateArray($timestr) {
  $timestamp = intval($timestr);
  $year = date('Y', $timestamp);
  $month = date('n',$timestamp);
  $day = date('j',$timestamp);
  return array('year' => $year, 'month' => $month, 'day' => $day);
}