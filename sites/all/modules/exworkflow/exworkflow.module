<?php

/**
 * exworkflow - publishing workflow module
 *
 * Creates a publishing workflow for articles (including legacy mediawiki article types, FAQs and News)  
 *
 * @copyright North Carolina State University 2010
 *
 */

// Implements hook_node_view
// Display the workflow form on node view
function exworkflow_node_view($node, $view_mode) {
  // get current user
  global $user;
  
  // if you ain't logged in, no workflow goodies for you
  if(!isset($user) || $user->uid == NULL) {
    return;
  }
  
  drupal_add_css(drupal_get_path('module', 'exworkflow') . '/exworkflow.css', array('group' => CSS_DEFAULT));
  
  // if it's a FAQ, see if it has an answer, and if not, denote that below the question
  if($node->type == 'faq') {
    // get the node's current revision id and use it to query the field_revision_body table
    // if the record does not exist, it does not have an answer.
    $faq_answer = db_query('SELECT * FROM {field_revision_body} WHERE revision_id = :vid', array(':vid' => $node->vid))->fetchObject();
    
    if($faq_answer == false) {
      $node->content['no_body'] = array('#markup' => '<p>There is no answer to this FAQ at this time.</p>');
    }
  }
  
  if(($node->type == 'article' || $node->type == 'faq' || $node->type == 'news') && $view_mode == 'full') {
    
    // get workflow preference to show or hide it
    $workflow_show_pref = db_query('SELECT * FROM {node_workflow_preferences} WHERE user_id = :uid', array(':uid' => $user->uid))->fetchObject();
    
    // if they've elected to not see the workflow, only display the button to show the workflow
    if($workflow_show_pref != false && $workflow_show_pref->show_workflow == false) {
      $workflow_content = '<p>'.drupal_render(drupal_get_form('exworkflow_toggle_form')).'</p>';
    }
    // otherwise, show the workflow
    else {
      $wrapper_class ="";
      $workflow_list = exworkflow_get_workflow_states();
    
      // find existing workflow
      $node_workflow = db_query('SELECT * FROM {node_workflow} WHERE node_id = :nid', array(':nid' => $node->nid))->fetchObject();
    
      // if no workflow to be found yet, start it at a draft state
      if($node_workflow == false) {
        $review_count = "Review Count: 0";
        $node_status = "Status: <strong>{$workflow_list[1]}</strong>";
      }
      else {
        // check to see if the node has been set to inactive
        if($node_workflow->active == false) {
          $workflow_content = '<div class="inactive"><p>This content has been set to inactive.</p>'.drupal_render(drupal_get_form('exworkflow_activate_form'))."</div>";
          $node->content['additional_field'] = array('#markup' => $workflow_content);
          return;
        }
        
        $review_count = "Review Count: {$node_workflow->review_count}";
        $node_status = "Status: <strong>{$workflow_list[$node_workflow->status]}</strong>";
      
        # is the node published
        if(isset($node_workflow->published_at)) {
          // if the current revision of the node is published, notify 
          // the user of that
          if($node_workflow->published_revision_id == $node->vid) {
            $publish_status_text = "The current version is published. You can either start a new draft revision by editing or unpublish.";
            $wrapper_class="wide";
          }
          else {
            $publish_status_text = "A previous version of this content is published";
          }
          # this should not be hardcoded
          $pageinfo_url = 'http://www.extension.org/pageinfo/source/create/'.$node->nid;
          $node_status .= "<p class='published'><a href='".$pageinfo_url."' title='More information about this published page.'>".$publish_status_text."</a></p>"  ;
        }
      }
    
      if(($node_workflow != false) && (isset($node_workflow->draft_status))) {
        $draft_status_string = "<br />Draft Status: <strong>{$workflow_list[$node_workflow->draft_status]}
</strong>";
      }
      else {
        $draft_status_string = '';
      }
      
      $toggle_form = drupal_get_form('exworkflow_toggle_form');
      $workflow_form = drupal_get_form('exworkflow_form');
      $unpublish_form = drupal_get_form('exworkflow_unpublish_form');
      $inactive_form = drupal_get_form('exworkflow_inactivate_form');

      $workflow_content = '<p>'.drupal_render($toggle_form).'</p>'
                        . '<div id="workflow"><div class="gutter"><h2>Publishing Workflow</h2><div id="wf_info" class="'.$wrapper_class.'">'
                        . '<p>'.$node_status.$draft_status_string.'</p>'
                        . "<p>{$review_count}</p></div>"
                        . drupal_render($workflow_form)
                        . drupal_render($unpublish_form)
                        . drupal_render($inactive_form)."</div></div>";
  } // end of are we displaying the workflow 'else' statement
    
    $node->content['additional_field'] = array('#markup' => $workflow_content);
  }
  
}

// build the workflow form
function exworkflow_form($form, &$form_state) {
  // get the current node
  $node = menu_get_object();
  if(empty($node)) { return; }
  $workflow_list = exworkflow_get_workflow_states();
  // find the current workflow for this node
  $node_workflow = db_query('SELECT * FROM {node_workflow} WHERE node_id = :nid', array(':nid' => $node->nid))->fetchObject();
  
  // if no workflow to be found yet or if it's found but no draft status and unpublished, start it at a draft state
  // and provide every option but to set it as draft
  if($node_workflow == false || (is_null($node_workflow->draft_status) && $workflow_list[$node_workflow->status] != 'Published')) {
    $initial_workflow_value = NULL;
    unset($workflow_list[1]);
  }
  else { 
    // if draft_status is null and it's published, set the initial workflow state to published
    if(is_null($node_workflow->draft_status) && $workflow_list[$node_workflow->status] == 'Published') {
      $initial_workflow_value = $node_workflow->status;
      // if it's published and we are currently on the published revision, only 
      // give the user the option to unpublish or they can start a new revision
      if($node_workflow->published_revision_id == $node->vid) {
        return;
      }
      
    }
    // if not published and the workflow does exist, tell us where we are in the draft process
    else {
      $initial_workflow_value = $node_workflow->draft_status;
    }
  }
  
  // build the form
  $form['wf_state'] = array(
    '#type' => 'select', 
    '#title' => t('Select Workflow State'), 
    '#default_value' => $initial_workflow_value,
    '#options' => $workflow_list, 
    '#required' => TRUE
  );
  
  $form['submit'] = array(
  '#type' => 'submit',
  '#value' => t('Set State'),
  );
  return $form;
}

// workflow form validation
function exworkflow_form_validate($form, &$form_state) {
  $workflow_states = exworkflow_get_workflow_states();
  if (!isset($form_state['values']['wf_state']) && !isset($form_state['values']['unpublish'])) {
    form_set_error('wf_state', "You must submit a valid workflow state.");
  }
  else if (isset($form_state['values']['wf_state']) and !isset($workflow_states[$form_state['values']['wf_state']])) {
    form_set_error('wf_state', "You must submit a valid workflow state.");
  }
}

// handle form submission
function exworkflow_form_submit($form, &$form_state) {
  // get the current user
  global $user;
  // get current node
  $node = menu_get_object();
  if(empty($node)) { return; }
  
  $workflow_list = exworkflow_get_workflow_states();
  $workflow_event_list = exworkflow_get_workflow_events();
  
  // Receive workflow form input
  if($workflow_list[$form_state['values']['wf_state']] == 'Published') {
    $node_status = 'published';
    $event_status = 'published';
    $draft_status = null;
    $publish_fields = array('published_at' => REQUEST_TIME, 'published_revision_id' => $node->vid, 'unpublished_at' => null);
  }
  else {
    $node_status = 'draft';
    $draft_status = $workflow_list[$form_state['values']['wf_state']];
    $event_status = $workflow_event_list[$form_state['values']['wf_state']];
    $publish_fields = array();
  }
  // record workflow  
  $workflow_obj = exworkflow_change_state($node, 
                                          $node_status, 
                                          $draft_status, 
                                          $event_status, 
                                          $user->uid, 
                                          null, 
                                          $publish_fields);
                            
  if($workflow_obj == null) { return; }
    
  drupal_set_message("Node updated successfully!");
}

// build the form button to unpublish
function exworkflow_unpublish_form($form, &$form_state) {
  $node = menu_get_object();
  if(empty($node)) { return; }
  $node_workflow = db_query('SELECT * FROM {node_workflow} WHERE node_id = :nid', array(':nid' => $node->nid))->fetchObject();
  
  // if the node is published, show the unpublish button
  if($node_workflow != false && $node_workflow->published_at != null) {
    $form['unpublish'] = array('#type' => 'value', '#value' => true);
    $form['submit'] = array('#type' => 'submit', '#value' => t('Unpublish'));
    return $form;  
  }
  
  else { return null; }
}

//probably not necessary, but will do anyways
//unpublish form validation
function exworkflow_unpublish_form_validate($form, &$form_state) {
  if (!isset($form_state['values']['unpublish'])) {
    form_set_error('unpublish', "You must submit a valid unpublish value.");
  }
}

// handle unpublish button submission
function exworkflow_unpublish_form_submit($form, &$form_state) {
  // get the current user
  global $user;
  // get current node
  $node = menu_get_object();
  if(empty($node)) { return; }
  // find the current workflow for this node
  $node_workflow = db_query('SELECT * FROM {node_workflow} WHERE node_id = :nid', array(':nid' => $node->nid))->fetchObject();
  
  if($node_workflow != false) {  
    // if the unpublish value was selected
    if(isset($form_state['values']['unpublish']) && ($form_state['values']['unpublish'] == 'true')) {
    
      // first, see of the current revision is the published revision, because, if not,
      // then the current draft status needs to be kept intact, ie. if you have published 
      // revision 3 and are working on revision 5 that has 2 reviews in draft, we need to 
      // keep this if it (revision 3 and the piece of content) gets unpublished.
      if($node_workflow->published_revision_id == $node->vid) {
        // record workflow 
        $workflow_obj = exworkflow_change_state($node, 
                                                'draft', 
                                                null, 
                                                'unpublished', 
                                                $user->uid, 
                                                null,  
                                                array('published_at' => null, 
                                                'published_revision_id' => null, 
                                                'unpublished_at' => REQUEST_TIME));
                                              
        // record the additional side-effect event of being set back to draft
        exworkflow_record_event($node, 'moved back to draft', $workflow_obj->nwid, $user->uid);
      }
      // the current revision is not the same as the published revision
      else {
        //record workflow     
        $workflow_obj = exworkflow_change_state($node, 
                                                $node_workflow->status_text, 
                                                $node_workflow->draft_status_text, 
                                                'unpublished', 
                                                $user->uid, 
                                                null, 
                                                array('published_at' => null, 
                                                      'published_revision_id' => null, 
                                                      'unpublished_at' => REQUEST_TIME)
                                                );

      }    
    }
    
    if($workflow_obj == null) { return; }                                            
    drupal_set_message("Node updated successfully!");  
  }
}

// build the form button to inactivate
function exworkflow_inactivate_form($form, &$form_state) {
  $node = menu_get_object();
  if(empty($node)) { return; }
  $node_workflow = db_query('SELECT * FROM {node_workflow} WHERE node_id = :nid', array(':nid' => $node->nid))->fetchObject();
  
  // show an inactivate button if it's active
  if(($node_workflow == false) || ($node_workflow != false && $node_workflow->active == true)) {
    $form['inactivate'] = array('#type' => 'value', '#value' => true);
    $form['submit'] = array('#type' => 'submit', '#value' => t('Make Inactive'));
    return $form;
  }
  else { return null; }
}

// probably not necessary, but will do anyways
// inactivate form validation
function exworkflow_inactivate_form_validate($form, &$form_state) {
  if (!isset($form_state['values']['inactivate'])) {
    form_set_error('inactivate', "You must submit a valid inactivation.");
  }
}

// submission of inactive form button
// if it was published, unpublish it
function exworkflow_inactivate_form_submit($form, &$form_state) {
  // get current user
  global $user;
  // get current node
  $node = menu_get_object();
  if(empty($node)) { return; }
  
  // find node workflow
  $node_workflow = db_query('SELECT * FROM {node_workflow} WHERE node_id = :nid', array(':nid' => $node->nid))->fetchObject();
  
  // check and see if the node was published
  if($node_workflow != false && $node_workflow->published_at != null) {
      $is_published = true;
      $unpublished_at_array = array('unpublished_at' => REQUEST_TIME);
  }
  // else if there was no node workflow or doesn't have a published_at, it obviously isn't published 
  else {
    $is_published = false;
    $unpublished_at_array = array();
  }
  
  // record new workflow
  $workflow_obj = exworkflow_change_state($node, 
                                          'draft', 
                                          null, 
                                          'made inactive', 
                                          $user->uid, 
                                          null, 
                                          array('published_at' => null, 'published_revision_id' => null, 'active' => 0) + $unpublished_at_array);
                          
  if($workflow_obj == null) { return; }
  
  // if the workflow's draft_status existed and was greater than the draft state, record the set back to draft event
  if($node_workflow != false && $node_workflow->draft_status != null && $node_workflow->draft_status > 1) {                        
    // it's being set back to draft, 
    // record that event along with the made inactive event from the exworkflow_change_state call
    exworkflow_record_event($node, 'moved back to draft', $node_workflow->nwid, $user->uid);
  }
  
  // set event to unpublish if it was published
  if($is_published == true) {
    exworkflow_record_event($node, 'unpublished', $node_workflow->nwid, $user->uid);
  }
      
  drupal_set_message("Node workflow updated successfully!");
}

// build the form button to activate
function exworkflow_activate_form($form, &$form_state) {
  $node = menu_get_object();
  if(empty($node)) { return; }
  $node_workflow = db_query('SELECT * FROM {node_workflow} WHERE node_id = :nid', array(':nid' => $node->nid))->fetchObject();
  
  // show an activate button if it's inactive
  if($node_workflow != false && $node_workflow->active == false) {
    $form['activate'] = array('#type' => 'value', '#value' => true);
    $form['submit'] = array('#type' => 'submit', '#value' => t('Activate'));
    return $form;
  }
  else { return null; }  
}

// probably not necessary, but will do anyways
// activate form validation
function exworkflow_activate_form_validate($form, &$form_state) {
  if (!isset($form_state['values']['activate'])) {
    form_set_error('activate', "You must submit a valid activation.");
  }
}

// submission of activate form button
// sets everything back to draft
function exworkflow_activate_form_submit($form, &$form_state) {
  // get current user
  global $user;
  // get current node
  $node = menu_get_object();
  if(empty($node)) { return; }  
    
  // record new workflow
  $workflow_obj = exworkflow_change_state($node, 
                                          'draft', 
                                          null, 
                                          'activated', 
                                          $user->uid, 
                                          null, 
                                          array('published_at' => null, 'published_revision_id' => null, 'active' => 1));
                                          
  if($workflow_obj == null) { return; }
  
  // it's being set back to draft, record that event along with the activated event from the exworkflow_change_state call
  exworkflow_record_event($node, 'moved back to draft', $workflow_obj->nwid, $user->uid);

  drupal_set_message("Node updated successfully!");
}

// build the form to show/hide workflow
function exworkflow_toggle_form($form, &$form_state) {
  // get current user
  global $user;
  
  // get workflow preference to show or hide it
  $workflow_show_pref = db_query('SELECT * FROM {node_workflow_preferences} WHERE user_id = :uid', array(':uid' => $user->uid))->fetchObject();
  
  if($workflow_show_pref != false && $workflow_show_pref->show_workflow == false) {
    $button_text = 'Show Publishing Workflow';
  }
  else {
    $button_text = "Hide Workflow";
  }
  
  $form['toggle_pref'] = array('#type' => 'value', '#value' => true);
  $form['submit'] = array('#type' => 'submit', '#value' => t($button_text));
  return $form;
}

// probably not necessary, but will check anyways
// workflow toggle validation
function exworkflow_toggle_form_validate($form, &$form_state) {
  global $user;
  
  // make sure we're logged in
  if(!isset($user) || $user->uid == NULL) {
    form_set_error('toggle_pref', "You must be logged in to set this preference.");
  }
  
  if (!isset($form_state['values']['toggle_pref'])) {
    form_set_error('toggle_pref', "You must submit a preference.");
  }
}

// submission of the show_hide workflow form
function exworkflow_toggle_form_submit($form, &$form_state) {
  // get current user
  global $user;
  
  // get workflow preference to show or hide it
  $workflow_show_pref = db_query('SELECT * FROM {node_workflow_preferences} WHERE user_id = :uid', array(':uid' =>  $user->uid))->fetchObject();
  
  
  // if the workflow pref exists and the show is set to false, then toggle the show to true,
  // otherwise, if the workflow pref exists and the show is set to true, toggle to false,
  // and if the workflow pref does not exist at all, then they've never set the pref 
  // and since it defaults to showing, you create a new record and set the show to false (toggle from default)
  if($workflow_show_pref != false && $workflow_show_pref->show_workflow == false) {
    $show_workflow = 1;
  }
  else {
    $show_workflow = 0;
  }
  
  if($workflow_show_pref != false) {
    // update existing record
    db_update('node_workflow_preferences')
    ->fields(array(
             'show_workflow' => $show_workflow,
             'changed' => REQUEST_TIME))
    ->condition('nwpid', $workflow_show_pref->nwpid)
    ->execute();  
  } 
  //create new record
  else {
    $fields = array(
      'user_id' => $user->uid,
      'show_workflow' => $show_workflow,
      'created' => REQUEST_TIME,
      'changed' => REQUEST_TIME);
    db_insert('node_workflow_preferences')->fields($fields)->execute();
  }
  
  drupal_set_message("Workflow pref updated successfully!");
}

/**
 * Implements hook_node_update().
 *
 * When a node has been updated, check to see if the current revision
 * is different than the node's workflow revision to see if we need to
 * start the workflow back at draft for a new revision.
 * We also need to capture the new current revision id for workflow reference here.
 */
function exworkflow_node_update($node) {
  if($node->type == 'article' || $node->type == 'faq' || $node->type == 'news') {
    // get the node's workflow
    $node_workflow = db_query('SELECT * FROM {node_workflow} WHERE node_id = :nid', array(':nid' => $node->nid))->fetchObject();
      
    // if the revision has changed, set status back to draft and update current revision id
    if($node_workflow != false && $node_workflow->current_revision_id != $node->vid) {
      global $user;
      
      if($node_workflow->active == true) {
        $event_text = 'moved back to draft';
      }
      else {
        $event_text = 'activated';
      }
      
      $workflow_obj = exworkflow_change_state($node, 'draft', null, $event_text, $user->uid, null, array('active' => 1));
      
      if($workflow_obj == null) { return; }
      
      // if the node was activated as part of the edit, it was also moved back to draft, 
      // also record this event
      if($event_text == 'activated') {
        exworkflow_record_event($node, 'moved back to draft', $node_workflow->nwid, $user->uid);
      }
      
    } // end of has the revision changed
  } // end of do we have a qualifying article type
  
}

function exworkflow_menu() {
  $items = array();
      
  $items['node/%node/workflow_history'] = array(
    'title' => 'Workflow History',
    'description' => 'Workflow history for node',
    'page callback' => 'exworkflow_history',
    'page arguments' => array(1),
    'access callback' => 'workflow_menu_permissions',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1000, // give it a high weight to push it to last on the menu list
  );

  return $items;
}

function workflow_menu_permissions($node) {
  global $user;
  
  if(($user != NULL && $user->uid != NULL) && ($node->type == 'article' || $node->type == 'faq' ||  $node->type == 'news')) { 
    // see if the node has a workflow event
    $node_workflow_event = db_query('SELECT * FROM {node_workflow_events} WHERE node_id = :nid', array(':nid' => $node->nid))->fetchObject();
    if($node_workflow_event != false) {
      return true; 
    }
  }
  return false;
}

/**
 * Implements hook_theme().
*/
function exworkflow_theme() {
  return array(
    'exworkflow_history' => array(
      'template' => 'exworkflow_history'
     )
  );
}

function exworkflow_history($node_obj) {
  $workflow_query = db_select('node_workflow_events', 'we');
  $workflow_query->addExpression('u.name', 'login');
  $workflow_query->addExpression('u.uid', 'user_id');
  $workflow_query->fields('we');
  $workflow_query->join('users', 'u', 'we.user_id = u.uid');
  $workflow_query->condition('we.node_id', $node_obj->nid)
                 ->orderBy('we.created', 'DESC');  
  $workflow_records = $workflow_query->execute();
  
  $event_array = array();
  
  foreach ($workflow_records as $workflow_record) {
    array_push($event_array, $workflow_record);
  }
  
  return theme('exworkflow_history', array('workflow_events' => $event_array));
}

/* Used as an API in this application for this module and other modules to use to 
*  record workflow changes
*    $node_obj -- the node object having it's workflow changed
*    $node_status_text -- the top-level status (ie. published, draft)
*    $draft_status_text -- the draft status (ie. reviewed, copy edited, etc.), case insensitive, but not space insensitive
*    $event_text -- the textual description of the workflow event, used for calling the function to record the workflow event,
*                   allowed values are the ones specified in the exworkflow_get_workflow_events() function (ie. published, moved back to draft, etc.)
*    $workflow_time -- the time this workflow occured (defaults to current time)
*    $additional_fields -- any extra fields and values (ie. array('active' => true)) in array form that get passed, if it's 
*    a recognized field in the table, it will be processed. Allowable extra fields right now include 'published_at', 'unpublished_at', 
*    'published_revision_id', and 'active'.
*/
function exworkflow_change_state($node_obj, $node_status_text, $draft_status_text, $event_text, $creator_id, $workflow_time = null, $additional_fields = array()) {
  
  if($workflow_time == null) {
    $workflow_time = REQUEST_TIME;
  }
  
  // find workflow for node
  $node_workflow = db_query('SELECT * FROM {node_workflow} WHERE node_id = :nid', array(':nid' => $node_obj->nid))->fetchObject();
  $workflow_list = exworkflow_get_workflow_states();
  $status_number = array_search(strtolower($node_status_text), exworkflow_search_workflow_states());
  
  if($status_number == false) {
    throw new Exception('Node workflow status does not exist.');
    return null;
  }
  
  if($draft_status_text != null) {
    $draft_status_number = array_search(strtolower($draft_status_text), exworkflow_search_workflow_states());
    if($draft_status_number == false) {
      throw new Exception('Draft status does not exist.');
      return null;
    }
  }
  else {
    $draft_status_number = null;
  }
  
  // check the event text to make sure it's a true workflow event description
  if($event_text == null || (array_search(strtolower($event_text), exworkflow_get_workflow_events()) == false)) {
    throw new Exception('Workflow event description does not exist.');
    return null;
  }
  
  // if no node workflow was found, create a new workflow record
  if($node_workflow == false) {   
    // handle review counts if no node workflow was found
    // if a review event occured, we need to set the number of reviews
    if($draft_status_number != null && $workflow_list[$draft_status_number] == 'Reviewed') { 
      $review_count = 1; 
    }
    else { 
      $review_count = 0; 
    }
    
    if($workflow_list[$status_number] == 'Published') {
      $additional_fields = array('published_at' => REQUEST_TIME, 'published_revision_id' => $node_obj->vid);
    }
     
    // if no workflow record exists and the current state is greater than 1, record a new workflow. 
    // if the current state is 1, we do not record anything as everything starts out as draft 
    // (this should not happen b/c draft state (1) isn't allowed on dropdown selection for nodes that do not have a workflow yet)
    if($draft_status_number != null && $draft_status_number <= 1) {
      return null;
    }
     
    else { 
      $fields = array(
        'node_id' => $node_obj->nid, 
        'current_revision_id' => $node_obj->vid,
        'review_count' => $review_count, 
        'status' => $status_number, 
        'status_text' => $workflow_list[$status_number],
        'draft_status' => $draft_status_number, 
        'draft_status_text' => ($draft_status_number == null) ? null : $workflow_list[$draft_status_number],
        'created' => $workflow_time, 
        'changed' => $workflow_time) + $additional_fields;
      db_insert('node_workflow')->fields($fields)->execute();
      
      // get newly created node workflow
      $workflow_object = db_query('SELECT * FROM {node_workflow} WHERE node_id = :nid', array(':nid' => $node_obj->nid))->fetchObject();    
      
      // record the workflow event
      exworkflow_record_event($node_obj, $event_text, $workflow_object->nwid, $creator_id, $workflow_time);
      return $workflow_object;
    }
  } // end of does the workflow exist
  
  // workflow record exists
  // update current workflow record
  else {
    // node workflow was found, check to make sure selected state is not the 
    // same as the current state unless it's being reviewed (state = 3)
    if($draft_status_number != null && $draft_status_number == $node_workflow->draft_status && $draft_status_number != 3) {
      return null;
    }
    
    $workflow_id = $node_workflow->nwid;
    // if the current state falls within the workflow states (ie. not an unpublished event)
    if ($draft_status_number != null && $draft_status_number <= 5) {
      // if a review event occured, we need to increase the number of reviews for the review count
      if($workflow_list[$draft_status_number] == 'Reviewed') {
        $review_count = $node_workflow->review_count + 1;
      }
      // if the node has been moved to ready for review or draft which come before the review 
      // process in the workflow, then set the review count back to zero. 
      else if($workflow_list[$draft_status_number] == 'Ready for Review' || $workflow_list[$draft_status_number] == 'Draft') {
        $review_count = 0;
      }
      // if the current state is not the review state and we are not in a state before the review process, then 
      // keep the review count for the workflow the same
      else {
        $review_count = $node_workflow->review_count;
      }
    }
    // if we published, keep the review count the same
    else if($workflow_list[$status_number] == 'Published') {
      $review_count = $node_workflow->review_count;
    }
    
    // else, the draft status was null possibly due to unpublishing or inactivation of the content
    else {
      $review_count = 0;
    }
    
    db_update('node_workflow')
    ->fields(array(
             'current_revision_id' => $node_obj->vid,
             'review_count' => $review_count,
             'status' => $status_number,
             'status_text' => $workflow_list[$status_number],
             'draft_status' => $draft_status_number,
             'draft_status_text' => ($draft_status_number == null) ? null : $workflow_list[$draft_status_number],
             'changed' => $workflow_time) + $additional_fields)
    ->condition('nwid', $workflow_id)
    ->execute();
    
    // record the workflow event
    exworkflow_record_event($node_obj, $event_text, $node_workflow->nwid, $creator_id, $workflow_time);
    
    return $node_workflow;
  
  } // end of does the workflow record exist 
}

// Record the new workflow event
// $workflow action refers to any workflow action like 'published', 'moved back to draft', 'reviewed', etc.
function exworkflow_record_event($node, $workflow_action, $workflow_id, $user_id, $event_time = REQUEST_TIME) {
  $workflow_event_list = exworkflow_get_workflow_events();
  $event_number = array_search(strtolower($workflow_action), $workflow_event_list);
  if($event_number == false) {
    throw new Exception('Workflow event does not exist.');
    return;
  }
  
  $node_workflow = db_query('SELECT * FROM {node_workflow} WHERE node_id = :nid', array(':nid' => $node->nid))->fetchObject();
  
  // record the workflow event
  $fields = array(
            'node_id' => $node->nid,
            'node_workflow_id' => $workflow_id,  
            'user_id' => $user_id,
            'revision_id' => $node->vid,
            'event_id' => $event_number,
            'description' => $workflow_event_list[$event_number],
            'created' => $event_time,
  );
  
  db_insert('node_workflow_events')->fields($fields)->execute();
}
  
// WARNING: DO NOT CHANGE THESE VALUES, 
// THEY ARE USED IN THE DATABASE TABLES
function exworkflow_get_workflow_states() {
  return array(
    1 => t('Draft'), 
    2 => t('Ready for Review'),
    3 => t('Reviewed'),
    4 => t('Copy Edited'),
    5 => t('Published'),
  );
}

// WARNING: DO NOT CHANGE THESE VALUES, 
// THEY ARE USED IN THE DATABASE TABLES
function exworkflow_get_workflow_events() {
  return array(
  1 => 'moved back to draft',
  2 => 'marked ready for review',
  3 => 'reviewed',
  4 => 'copy edited',
  5 => 'published',
  6 => 'unpublished',
  7 => 'made inactive',
  8 => 'activated',
  );
}

// WARNING: DO NOT CHANGE THESE VALUES, 
// THEY ARE USED IN THE DATABASE TABLES
function exworkflow_search_workflow_states() {
  return array(
    1 => t('draft'), 
    2 => t('ready for review'),
    3 => t('reviewed'),
    4 => t('copy edited'),
    5 => t('published'),
  );
}
