<?php
// $Id$

/**
 * Test the Group group CRUD handling.
 */
class OgGroupCrud extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Organic groups CRUD',
      'description' => 'Test the create, update and remove of group entitys.',
      'group' => 'Organic groups',
    );
  }

  function setUp() {
    parent::setUp('entity', 'entity_test', 'og');
    $this->web_user = $this->drupalCreateUser();
  }

  /**
   * Test CRUD of group entitys.
   */
  function testOgCrud() {
    $group = og_get_group('entity_test', 1, TRUE);

    // Assert is new property.
    $this->assertTrue($group->is_new, t('New group has "is new" property.'));

    // Assert default state.
    $this->assertTrue($group->state == OG_STATE_ACTIVE, t('Default state property is active.'));

    // Assert default creation time.
    $this->assertTrue($group->created, t('Group creating time was added to group.'));

    // Assert group ID not set.
    $this->assertTrue(empty($group->gid), t('Group ID not set for unsaved group.'));

    // Save the group.
    $group = og_save($group);

    // Assert group ID was set.
    $this->assertTrue(!empty($group->gid), t('Group ID was set for saved group.'));

    // Set a new state for the group.
    $group = og_get_group('entity_test', 1);
    $group->state = OG_STATE_PENDING;

    $group = og_save($group);

    // Assert group isn't loaded, when state is pending and state isn't
    // specifically stated.
    drupal_static_reset('og_get_group_ids');
    $group = og_get_group('entity_test', 1);

    $this->assertFalse($group, t('Pending state group was not loaded, as it was not requested.'));

    // Reload group to make sure state was updated.
    $group = og_get_group('entity_test', 1, FALSE, array(OG_STATE_PENDING), TRUE);

    $this->assertTrue($group->state == OG_STATE_PENDING, t('Group was updated.'));

    og_delete($group->gid);
    $group = og_get_group('entity_test', 1, FALSE, array(OG_STATE_PENDING), TRUE);

    $this->assertFalse($group, t('Group was deleted.'));
  }

  /**
   * Test creation of groups upon creation of enteties with group field.
   */
  function testOgFieldOgGroup() {

    $admin_user = $this->drupalCreateUser(array('bypass node access', 'administer content types'));
    $this->drupalLogin($admin_user);

    // Create group content type.
    $type = $this->drupalCreateContentType(array(), array('og_group_type' => 'group'));
    $type = $type->type;

    // Create a node and set the group field to TRUE.
    $group_group[LANGUAGE_NONE][0]['value'] = TRUE;
    $node = $this->drupalCreateNode(array('type' => $type, OG_GROUP_FIELD => $group_group));

    // Assert a group was created.
    $group = og_get_group('node', $node->nid);

    $this->assertTrue(!empty($group->gid), t('Group was created.'));

    // Assert the group's state and the entity state is active.
    $this->assertTrue($group->state == OG_STATE_ACTIVE, t('Group entity state is active.'));

    // Edit the node prgrouprmatically, and set the group state to pending.
    $property = OG_GROUP_FIELD;
    $node->{$property}[LANGUAGE_NONE][0]['value'] = 0;
    node_save($node);

    // Reset the group.
    $group = og_load($group->gid, TRUE);

    // Assert the group's state is pending.
    $this->assertTrue($group->state == OG_STATE_PENDING, t('Group entity was changed to pending.'));
  }
}

/**
 * Test the Group content handeling.
 */
class OgTypeTest extends DrupalWebTestCase {

  public static function __getInfo() {
    return array(
      'name' => 'Organic groups content types',
      'description' => 'Test the Group group node and group content creation.',
      'group' => 'Organic groups',
    );
  }

  function setUp() {
    parent::setUp('entity', 'og');
  }


  function __testOgType() {
    $admin_user = $this->drupalCreateUser(array('bypass node access', 'administer content types'));
    $this->drupalLogin($admin_user);

    $this->drupalGet('admin/structure/types/add');

    // Assert OG default types exist.
    $this->assertText(t('Group node'), t('Group node option was found.'));
    $this->assertText(t('group content'), t('group content option was found.'));

    // Create group content type.
    $group = $this->drupalCreateContentType(array(), array('og_group_type' => 'group'));

    // Create post content type.
    $group_content = $this->drupalCreateContentType(array(), array('og_group_content_type' => 'group content'));

    $this->assertTrue(og_is_group_content_type($group_content->type), t('Content type is group content.'));

    // Assert group content fields were added to the content type.
    $this->drupalGet('node/add/' . $group_content->type);
    $this->assertText(t('Groups audience'), t('Groups audience field was found.'));
  }
}

class OgUserPermissionsTestCase extends DrupalWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Organic groups role permissions',
      'description' => 'Verify that role permissions can be added and removed via API.',
      'group' => 'Organic groups'
    );
  }

  function setUp() {
    parent::setUp('og');

    $this->admin_user = $this->drupalCreateUser(array('bypass node access', 'administer content types'));
    $this->drupalLogin($this->admin_user);

    // Create group content type.
    $group_type = $this->drupalCreateContentType();
    $this->group_type = $group_type->type;

    // Add og_group field.
    og_create_field('og_group', 'node', $this->group_type);

    $node = $this->drupalCreateNode(array('type' => $group_type->type, 'og_group' => array(LANGUAGE_NONE => array(0 => array('value' =>TRUE)))));
    $this->group = og_get_group('node', $node->nid);
  }


  /**
   * Verify proper permission changes by og_user_role_change_permissions().
   */
  function testOgUserRoleChangePermissions() {
    $account = $this->drupalCreateUser();
    $gid = $this->group->gid;

    // Associate the user to the group.
    og_subscribe_user(array(array('gid' => $gid)), $account);

    // Verify current permissions.
    $this->assertTrue(og_user_access($gid, 'update own group content', $account), t('User has "update own group content" permission.'));
    $this->assertTrue(og_user_access($gid, 'delete own group content', $account), t('User has "delete own group content" permission.'));
    $this->assertFalse(og_user_access($gid, 'administer group', $account), t('User does not have "administer group" permission.'));

    // Change permissions to authenticated member.
    $roles = og_get_group_default_roles($gid);
    // Anonymous role ID.
    $rid = $roles[OG_AUTHENTICATED_ROLE];

    $permissions = array(
      'delete own group content' => 0,
      'administer group' => 1,
    );
    og_user_role_change_permissions($rid, $permissions);

    // Verify proper permission changes.
    $this->assertTrue(og_user_access($gid, 'update own group content', $account), t('User still has "update own group content" permission.'));
    $this->assertFalse(og_user_access($gid, 'delete own group content', $account), t('User no longer has "delete own group content" permission.'));
    $this->assertTrue(og_user_access($gid, 'administer group', $account), t('User now has "administer group" permission.'));
  }
}
