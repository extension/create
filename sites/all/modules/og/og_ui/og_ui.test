<?php


class OgUiUserPermissionsTestCase extends DrupalWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Organic groups UI role permissions',
      'description' => 'Verify that role permissions can be added and removed via the permissions page of the group.',
      'group' => 'Organic groups UI'
    );
  }

  function setUp() {
    parent::setUp('og_ui');

    $this->admin_user = $this->drupalCreateUser(array(
      'bypass node access',
      'administer content types',
      'administer group',
    ));
    $this->drupalLogin($this->admin_user);

    // Create group content type.
    $group_type = $this->drupalCreateContentType();
    $this->group_type = $group_type->type;

    // Add og_group field.
    og_create_field(OG_GROUP_FIELD, 'node', $this->group_type);

    $node = $this->drupalCreateNode(array('type' => $group_type->type, 'og_group' => array(LANGUAGE_NONE => array(0 => array('value' =>TRUE)))));
    $this->group = og_get_group('node', $node->nid);
  }

  /**
   * Change user permissions and check og_user_access().
   */
  function testOgUiUserPermissionChanges() {
    $web_user = $this->drupalCreateUser();
    $gid = $this->group->gid;
    $this->assertTrue(og_user_access($gid, 'subscribe', $web_user), t('User has "subscribe" permission.'));

    $roles = og_get_default_roles();
    $roles = array_flip(array_keys($roles['og']));

    // Remove a permission.
    $edit = array();
    $edit['1[subscribe]'] = FALSE;
    $this->drupalPost('admin/config/group/permissions', $edit, t('Save global permissions'));
    $this->assertText(t('The changes have been saved.'), t('Successful save message displayed.'));

    // FIXME: Understand why reseting the static cache isn't enough.
    $this->resetAll();

    $this->assertFalse(og_user_access($gid, 'subscribe', $web_user), t('User now does not have "subscribe" permission.'));

    // Re-add permission.
    $edit = array();
    $edit['1[subscribe]'] = TRUE;
    $this->drupalPost('admin/config/group/permissions', $edit, t('Save global permissions'));

    $this->resetAll();

    $this->assertTrue(og_user_access($gid, 'subscribe', $web_user), t('User has "subscribe" permission again.'));
  }
}

class OgUiManagePeopleTestCase extends DrupalWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Organic groups UI manage people',
      'description' => 'Verify the people management functionality.',
      'group' => 'Organic groups UI'
    );
  }

  function setUp() {
    parent::setUp('og_ui', 'entity_test');
    module_enable(array('entity_feature'));
    // Add OG group field to the entity_test's "main" bundle.
    og_create_field(OG_GROUP_FIELD, 'entity_test', 'main');
  }

  /**
   * Testing adding people via group/[entity_type]/[etid]/admin/people/add-user.
   */
  function testOgUiAddPeople() {
    $admin_user = $this->drupalCreateUser();
    $this->drupalLogin($admin_user);

    // Create an entity.
    $entity = entity_create('entity_test', array('name' => 'main', 'uid' => $admin_user->uid));

    $entity->{OG_GROUP_FIELD}[LANGUAGE_NONE][0]['value'] = 1;
    $entity->save();
    $group = og_get_group('entity_test', $entity->pid);

    // Add users to the group, with different states.
    foreach (og_group_content_states() as $state => $name) {
      $web_user = $this->drupalCreateUser();
      $edit = array();
      $edit['og_add_user'] = $web_user->name;
      $edit['og_add_user_state'] = $state;
      $this->drupalPost('group/entity_test/' . $entity->pid . '/admin/people/add-user', $edit, t('Add users'));

      // Reload user, just to make sure field was updated.
      $web_user = user_load($web_user->uid, TRUE);
      $this->assertTrue(og_is_member($group->gid, 'user', $web_user, array($state)), t('User was added to the group with @name state.', array('@name' => $name)));
    }

    // Add non-existing user.
    $edit = array();
    $edit['og_add_user'] = $this->randomName();
    $this->drupalPost('group/entity_test/' . $entity->pid . '/admin/people/add-user', $edit, t('Add users'));

    $this->assertText(t('You have entered an invalid user name.'), t('Invalid user name not added to group.'));
  }
}

/**
 * Upgrade test.
 *
 * Load a filled installation of Drupal 6 and run the upgrade process on it.
 */
class OgUiUpgradePathTestCase extends UpgradePathTestCase {
  public static function getInfo() {
    return array(
      'name'  => 'Organic groups UI upgrade path',
      'description'  => 'Tests the upgrade path of Organic groups UI.',
      'group' => 'Organic groups UI',
    );
  }

  public function setUp() {
    // Path to the database dump.
    $this->databaseDumpFiles = array(
      drupal_get_path('module', 'og_ui') . '/tests/drupal-6.og-ui.database.php',
    );
    parent::setUp();
  }

  /**
   * Test a successful upgrade.
   */
  public function testOgUiUpgrade() {
    // The upgrade should "fail" since OG won't upgrade until it's enabled.
    $this->performUpgrade(FALSE);

    // TODO: Understand why this workround is needed to load all entity classes.
    module_enable(array('entity'));
    module_load_include('inc', 'entity' ,'includes/entity');
    module_load_include('inc', 'entity' ,'includes/entity.controller');
    module_enable(array('og_ui'));

    // TODO: Why is this horrible hack needed?
    include_once DRUPAL_ROOT . '/includes/install.inc';
    drupal_set_installed_schema_version('og_ui', 6999);

    $this->performUpgrade(FALSE);

    // Assert according to the scenario Drupal 6's test table dump was created.
    $nodes_info = array(
      // Open group.
      1 => array(
        'name' => t('open'),
        'anon' => array(
          'subscribe' => FALSE,
          'subscribe without approval' => TRUE,
        ),
      ),
      // Moderated group.
      2 => array(
        'name' => t('moderated'),
        'anon' => array(
          'subscribe' => TRUE,
          'subscribe without approval' => FALSE,
        ),
      ),
      // Invite only group.
      3 => array(
        'name' => t('invite only'),
        'anon' => array(
          'subscribe' => FALSE,
          'subscribe without approval' => FALSE,
        ),
      ),
      // Closed group.
      4 => array(
        'name' => t('closed'),
        'anon' => array(
          'subscribe' => FALSE,
          'subscribe without approval' => FALSE,
        ),
        'auth' => array('unsubscribe' => FALSE),
      ),
    );

    foreach ($nodes_info as $nid => $node_info) {
      // Set default values.
      $node_info += array('auth' => array('unsubscribe' => TRUE));

      $node = node_load($nid);
      // Assert the role and permissions field exists and is set to TRUE.
      $this->assertEqual($node->{OG_DEFAULT_ACCESS_FIELD}[LANGUAGE_NONE][0]['value'], 1, t('Organic groups role and permissions field found and is enabled.'));

      // Assert node is a group.
      $group = og_get_group('node', $nid);
      $this->assertTrue($group, t('Node ID @nid is a group.', array('@nid' => $nid)));

      // Assert permissions for non-member and member roles.
      $roles = og_roles($group->gid);
      $permissions = og_role_permissions($roles);

      $anon_rid = array_search(OG_ANONYMOUS_ROLE, $roles);
      $auth_rid = array_search(OG_AUTHENTICATED_ROLE, $roles);

      $this->assertEqual($permissions[$anon_rid], array_filter($node_info['anon']), t('Correct permissions were set for non-member role in @type group.', array('@type' => $node_info['name'])));
      $this->assertEqual($permissions[$auth_rid], array_filter($node_info['auth']), t('Correct permissions were set for member role in @type group.', array('@type' => $node_info['name'])));
    }

  }
}
