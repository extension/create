<?php

/**
 * exlistview - module for creating and displaying listviews of content
 *
 * @copyright North Carolina State University 2010
 *
 */

/**
 * Implements hook_theme().
*/
function exlistview_theme() {
  return array(
    'exlistview_show' => array(
      'template' => 'exlistview_show'
     )
  );
}


// Implementing hook_menu for the AaE list views
function exlistview_menu() {
  $items = array();
  $items['listviews/draft'] = array(
    'title' => 'Draft Content',
    'description' => 'List view of draft content',
    'page callback' => 'exlistview_show',
    'access callback' => 'menu_permissions',
    'weight' => 1,
  );
  
  $items['listviews/ready for review'] = array(
    'title' => 'Ready for Review Content',
    'description' => 'List view of ready for review content',
    'page callback' => 'exlistview_show',
    'access callback' => 'menu_permissions',
    'weight' => 2,
  );
  
  $items['listviews/reviewed'] = array(
    'title' => 'Reviewed Content',
    'description' => 'List view of reviewed content',
    'page callback' => 'exlistview_show',
    'access callback' => 'menu_permissions',
    'weight' => 3,
  );
  
  $items['listviews/copy edited'] = array(
    'title' => 'Copy Edited Content',
    'description' => 'List view of copy edited content',
    'page callback' => 'exlistview_show',
    'access callback' => 'menu_permissions',
    'weight' => 4,
  );
  
  $items['listviews/published'] = array(
    'title' => 'Published Content',
    'description' => 'List view of published content',
    'page callback' => 'exlistview_show',
    'access callback' => 'menu_permissions',
    'weight' => 5,
  );
  
  $items['listviews/inactive'] = array(
    'title' => 'Inactive Content',
    'description' => 'List view of inactive content',
    'page callback' => 'exlistview_show',
    'access callback' => 'menu_permissions',
    'weight' => 6,
  );
  
  return $items;
}

function menu_permissions() {
  global $user;
  
  if($user != NULL && $user->uid != NULL) { return true; }
  else { return false; }
}

function exlistview_show() {
  // get current user
  global $user;
  
  // get the workflow state passed in
  // defaults to draft
  switch (arg(1)) {
      case 'draft':
          $workflow_state = 1;
          break;
      case 'ready for review':
          $workflow_state = 2;
          break;
      case 'reviewed':
          $workflow_state = 3;
          break;
      case 'copy edited':
          $workflow_state = 4;
          break;
      case 'published':
          $workflow_state = 5;
          break;
      case 'inactive':
          $node_active = 0;
          $workflow_state = 1;
          break;
      default:
          $workflow_state = 1;
  
  }
  
  
  $listview_preference = db_query('SELECT * FROM {listview_preferences} WHERE user_id = :uid', array(':uid' => $user->uid))->fetchObject();
  
  // find user preference for tag filtering if it exists
  if($listview_preference != false) {
    $tag_string = $listview_preference->tag_filter;
    
    $node_type_or = db_or();
    
    if($listview_preference->show_faqs == true) {
      $node_type_or->condition('n.type', 'faq');
    }
    
    if($listview_preference->show_articles == true) {
      $node_type_or->condition('n.type', 'article');
    }
    
    if($listview_preference->show_news == true) {
      $node_type_or->condition('n.type', 'news');
    }
    
    // if no tags in filter, don't care about tags, just give me the nodes based on node type
    if(trim($tag_string) == '') {
      $listview_query = db_select('node', 'n');
      $listview_query->addExpression('DISTINCT(n.nid)', 'node_id');
      // if there were type conditions to be applied (ie, faq, article, etc.)
      if($node_type_or != db_or()) {
        $listview_query->condition($node_type_or);
      }
      $node_records = $listview_query->execute();
    }
    
    // else tags were in filter
    else {
      $tag_array = explode(',', $tag_string);
      $tag_count = count($tag_array);
    
      $listview_query = db_select('taxonomy_index', 'ti');
      $listview_query->join('taxonomy_term_data', 'ttd', 'ttd.tid = ti.tid');
      $listview_query->join('node', 'n', 'n.nid = ti.nid');
      $listview_query->addExpression('DISTINCT(ti.nid)', 'node_id');
      $listview_query->addExpression('COUNT(DISTINCT(ti.tid), ti.nid)', 'node_count');
      // if there were type conditions to be applied (ie, faq, article, etc.)
      if($node_type_or != db_or()) {
        $listview_query->condition($node_type_or);
      }
      $listview_query->condition('ttd.name', $tag_array, 'IN')
                ->groupBy('node_id')
                ->having("node_count = {$tag_count}");
                                
      $node_records = $listview_query->execute();
    }
    
    
    $node_id_array = array();
    foreach ($node_records as $node_record) {
      array_push($node_id_array, $node_record->node_id);
    }
  
  if(count($node_id_array) > 0) {
    // find user preference for group audience if it exists and filter by it
    $group_string = $listview_preference->group_audience_filter;
    if(trim($group_string) != '') {
      $group_array = explode(',', $group_string);
      $group_count = count($group_array);
      
      $listview_query = db_select('field_data_group_audience', 'ga');
      $listview_query->join('group_resource_tags', 'grt', 'ga.group_audience_gid = grt.nid');
      $listview_query->addExpression('DISTINCT(ga.entity_id)', 'node_id');
      $listview_query->addExpression('COUNT(ga.entity_id)', 'node_count');
    
      // want to make sure we have the group resource tag names for the nodes in the saved pref for group list, 
      // we also want to make sure the node id's fall in the list of the nodes already filtered by tag
      $listview_query->condition(db_and()
                                 ->condition('grt.resource_tag_name', $group_array, 'IN')
                                 ->condition('ga.entity_id', $node_id_array, 'IN'))
                ->groupBy('node_id')
                ->having("node_count = {$group_count}");
                
      $node_records = $listview_query->execute();
      
      //create a new node_id_array based on the tag and type filters plus the groups audience filter
      $node_id_array = array();
      foreach ($node_records as $node_record) {
        array_push($node_id_array, $node_record->node_id);
      }
      
    } // end of did we have groups in the pref for this user
  } // end of did we have nodes that matched the tag filter and type filter
  
  } // end of did we have a listview preference
  
  // if there were no listview prefs set or listview prefs set and records were found, continue w/ query,
  // otherwise, return no nodes
  if(($listview_preference == false) || ($listview_preference != false && count($node_id_array) > 0)) {
    
    $order_by = 'n.created';
    $order_direction = 'desc';
  
    if((isset($_GET['order'])) && (trim($_GET['order']) != '') && (isset($_GET['field'])) && (trim($_GET['field']) != '')) {
      $order_direction = $_GET['order'];
      $order_field = $_GET['field'];
      
      if($order_field == 'nid') {
        $order_by = 'n.nid';
      }
      else {
        $order_by = 'n.created';
      }
    
      if($order_direction == 'asc') {
        $order_direction = 'ASC';
        $next_sort_direction = array('order' => 'desc');
      }
      else {
        $order_direction = 'DESC';
        $next_sort_direction = array('order' => 'asc');
      }
    }
  
    else { 
      $next_sort_direction = array('order' => 'asc');
    }
  
    $listview_query = db_select('node', 'n')->extend('PagerDefault');
    $listview_query->fields('n');
    // if we have filtering going on and we had returned nodes from it
    if(isset($node_id_array)) {
      $listview_query->condition('n.nid', $node_id_array, 'IN');
    }
    
    // if the selected listview is draft content, return content that's in draft workflow status 
    // or have no status at all, which would imply draft
    if($workflow_state == 1) {
      $listview_query->leftjoin('node_workflow', 'nw', 'nw.node_id = n.nid');
      
      // if the node list is in-active nodes
      if(isset($node_active) && $node_active == 0) {
        $listview_query->condition('nw.active', 0);
      }
      // else, we are looking for active nodes
      else {
        $listview_query->condition(db_or()
                                   ->condition(db_and()
                                               ->condition('nw.draft_status', $workflow_state)
                                               ->condition('nw.active', 1)
                                               )
                                   ->condition(db_and()
                                               ->condition('nw.draft_status', NULL)
                                               ->condition('nw.published_at', NULL)
                                               ->condition('nw.active', 1)
                                              )
                                   ->condition('nw.nwid', NULL)              
                                  );
      } // end of active node list conditional
    } // end of is the workflow state 1
    else {
      $listview_query->join('node_workflow', 'nw', 'nw.node_id = n.nid');
      // handle the case of published listview where draft_status is null
      if($workflow_state == 5) {
        $listview_query->condition(db_and()
                                   ->condition('nw.published_at', NULL, 'IS NOT NULL')
                                   ->condition('nw.active', 1)
                                  );
      }
      else {
        $listview_query->condition(db_and()
                                   ->condition('nw.draft_status', $workflow_state)
                                   ->condition('nw.active', 1)
                                   );
      }
    }
    
    $listview_query->condition(db_or()
                   ->condition('n.type', 'article')
                   ->condition('n.type', 'faq')
                   ->condition('n.type', 'news'))
                   ->limit(15) 
                   ->orderBy($order_by, $order_direction);   
    
    $listview_records = $listview_query->execute();
    
    if(isset($_GET['page'])) {
      $page_number = array('page' => $_GET['page']);
    }
    else {
      $page_number = array();
    }
  }
  
  // else we have no node records b/c the filters filtered them all out
  else {
    $record_array = array();
    return theme('exlistview_show', array('listview_nodes' => $record_array, 'tag_form' => drupal_get_form('exlistview_tag_form')));
  }
  
  $record_array = array();
  foreach ($listview_records as $listview_record) {
    array_push($record_array, $listview_record);
  }
  
  return theme('exlistview_show', array('listview_nodes' => $record_array,  'sort_direction' => $next_sort_direction, 'page_number' => $page_number, 'pager' => theme('pager'), 'tag_form' => drupal_get_form('exlistview_tag_form')));
}

// build the tag and type filter form
// this form provides the interface for searching on 
// content based on multiple tags and content type selected
function exlistview_tag_form($form, &$form_state) {
  // get current user
  global $user;
  
  $group_tags = _exlistview_return_group_tags();
  
  // find user preference for tag filtering if it exists
  $listview_preference = db_query('SELECT * FROM {listview_preferences} WHERE user_id = :uid', array(':uid' => $user->uid))->fetchObject();
  
  if($listview_preference != false) {
    $tag_default_value = $listview_preference->tag_filter;
    $selected_group_preferences = _exlistview_return_selected_groups($listview_preference, $user->uid);
    
    if(trim($listview_preference->group_audience_filter) != '') {
      $selected_group_string = 'Currently, '.
                               _get_display_names_for_group_tags($group_tags, $listview_preference->group_audience_filter).
                               ' selected';  
    }
    else {
      $selected_group_string = 'Currently, no groups are selected.';
    }
    
    $show_faqs = $listview_preference->show_faqs;
    $show_articles = $listview_preference->show_articles;
    $show_news = $listview_preference->show_news;
  }
  else {
    $tag_default_value = '';
    $selected_group_preferences = array();
    $selected_group_string = 'Currently, no groups are selected.';
    $show_faqs = true;
    $show_articles = true;
    $show_news = false;
  }
  
  $group_array = array_merge(array('' => '--Clear Groups--'), $group_tags);
  
  // build the form
  $form['filter_tags'] = array(
    '#type' => 'textfield', 
    '#title' => t('Filter by Tags (comma separated)'), 
    '#default_value' => $tag_default_value,
  );
  
  $form['select_group_audience'] = array(
    '#type' => 'select',
    '#multiple' => true,
    '#title' => 'Group Audience ('.$selected_group_string.')',
    '#default_value' => $selected_group_preferences,
    '#options' => $group_array,
    '#required' => FALSE,
  );
  
  if(isset($_GET['order']) && isset($_GET['field'])) {  
    $form['sort_order'] = array('#type' => 'value', '#value' => $_GET['order']);
    $form['sort_field'] = array('#type' => 'value', '#value' => $_GET['field']);
  }
  
  $form['show_faqs'] = array(
    '#type' => 'checkbox',
    '#title' => t('Faqs'),
    '#default_value' => $show_faqs,
  );
  
  $form['show_articles'] = array(
    '#type' => 'checkbox',
    '#title' => t('Articles'),
    '#default_value' => $show_articles,
  );
  
  $form['show_news'] = array(
    '#type' => 'checkbox',
    '#title' => t('News'),
    '#default_value' => $show_news,
  );
  
  $form['submit'] = array(
  '#type' => 'submit',
  '#value' => t('Filter'),
  );
  return $form;
}

// handle tag form submission and group filter submission
function exlistview_tag_form_submit($form, &$form_state) {
  // get current user
  global $user;
  $tags_to_filter_by = $form_state['values']['filter_tags'];
  
  // handle group filter stuff
  $groups_to_filter_by = $form_state['values']['select_group_audience'];
  $group_array = array();
  foreach($groups_to_filter_by as $group_name => $group_tag_value) {
    $group_array[] = trim($group_tag_value);
  }
  
  if(count($group_array) > 0) {
    $group_string = implode(",", $group_array);
  }
  else {
    $group_string = '';
  }
  // end of handling groups stuff
  
  $show_faqs = $form_state['values']['show_faqs'];
  $show_articles = $form_state['values']['show_articles'];
  $show_news = $form_state['values']['show_news'];
  
  // find user preference for filtering if it exists
  $listview_preference = db_query('SELECT * FROM {listview_preferences} WHERE user_id = :uid', array(':uid' => $user->uid))->fetchObject();
  
  $tags_to_save = prepare_tags($tags_to_filter_by);
  
  
  // if a tag preference was found for this user, update it
  if($listview_preference != false) {
    db_update('listview_preferences')
      ->fields(array(
               'tag_filter' => $tags_to_save,
               'group_audience_filter' => $group_string,
               'show_faqs' => $show_faqs,
               'show_articles' => $show_articles,
               'show_news' => $show_news,
               'changed' => REQUEST_TIME,
               ))
      ->condition('lpid', $listview_preference->lpid)
      ->execute();
    
  }
  // tag preference was not found, create a new one
  else {  
    // record the tag preference
    $fields = array(
              'user_id' => $user->uid, 
              'tag_filter' => $tags_to_save,
              'group_audience_filter' => $group_string,
              'show_faqs' => $show_faqs,
              'show_articles' => $show_articles,
              'show_news' => $show_news,
              'created' => REQUEST_TIME,
              'changed' => REQUEST_TIME,
    );
  
    db_insert('listview_preferences')->fields($fields)->execute();  
    
  }
  
  drupal_set_message("Workflow filter preferences updated successfully!");

}

// routine to clean and strip tags before inserting into the db
function prepare_tags($tag_string) {
  $return_string = '';
  // handle the case of an empty string (clearing the filter)
  if(trim($tag_string) == '') {
    return '';
  }
  $tag_array = explode(',', $tag_string);
  foreach ($tag_array as $tag) {
    $formatted_tag = trim($tag);
    // handle empty elements
    if($formatted_tag == '') {
      continue;
    }
      
    if($return_string == '') {
      $return_string .= $formatted_tag;
    }
    else {
      $return_string .= ','.$formatted_tag;
    }
  }
  
  return $return_string;
}

// get a list of available group tags (CoP tags)
function _exlistview_return_group_tags() {
	$query = db_select('group_resource_tags');
	$query->addField('group_resource_tags', 'community_name');
  $query->addField('group_resource_tags', 'resource_tag_name');
  $query->condition('is_primary_tag', true);
  $query->orderBy('community_name');
  $result = $query->execute()->fetchAllAssoc('resource_tag_name');
  $returnarray = array();
  foreach($result as $community => $community_data) {
    $returnarray[$community] = $community_data->community_name;
  }
  return $returnarray;
}

// find group filter preferences
function _exlistview_return_selected_groups($listview_pref, $user_id) {
  $group_audience_string = $listview_pref->group_audience_filter;
  
  if(trim($group_audience_string) == '') {
    return array();
  }
  else {
    $group_array = explode(',', $group_audience_string);
    foreach($group_array as $group_tag) {
      $return_array[$group_tag] = $group_tag;    
    }
    return $return_array;
  }  
  
}

//lookup mapping for group tags to group display names
function _get_display_names_for_group_tags($group_tag_options, $selected_tags) {
  $display_array = array();
  $selected_tag_array = explode(',', $selected_tags);
  
  foreach($selected_tag_array as $selected_tag) {
    if(isset($group_tag_options[$selected_tag])) {
      $display_array[] = $group_tag_options[$selected_tag];
    }
  }
  
  return implode(',', $display_array);
}

