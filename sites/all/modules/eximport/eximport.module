<?php
/**
 * eximport - content seed from feed.
 *
 * @package eximport 
 * @version 0.1
 * @author James E. Robinson, III <james.robinson@extension.org>
 * @copyright North Carolina State University 2010
 */

// Bootstrap Drupal - if including in standalone script
// require 'includes/bootstrap.inc';
// drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);

require_once 'simplehtmldom/simple_html_dom.php';
require_once 'http_build_url.php';

 /**
  Prior to running import the following pieces should be in place.
  
  1. Devel module enabled for debug output, if desired
     a. confirm devel module perms for admin
  2. Be sure content types exist and are configured properly
     a. news (cop)
     b. article (cop)
     c. originalnews (cop)
     Need title, body, and tags. 
  3. check filter weights and configuration at /admin/config/content/formats
     a. see screenshot -
https://skitch.com/jerobins/rdsqe/text-formats-extension-content-management-system
     b. confirm Full HTML is not filtering or modifying content -
https://skitch.com/jerobins/rdsqu/full-html-extension-content-management-system
  
 */
 
/**
 *
 * Import Plan
 *
 * 1. export all revisions of all articles from MW
 *    a. create XML files with about 10000 articles in each
 *    b. Format as valid Atom 1.0 feed
 *    c. will have approx 4 files after export for about, many more for cop
 *
 * 2. import revisions
 *    a. use eXtension as the user for publishing events
 *    b. TODO mark all published revisions as such
 *    c. import 'news' articles as content-type news and 'originalnews'
 *       as content-type original_news , all others as articles
 *
 * 3. import images? TODO - review Media module
 *
 * 4. rewrite URLs
 *    a. rewrite img src's
 *    b. rewrite wiki href's
 *
 * 5. article metadata
 *    a. TODO will be a post process task once plan in place
 */

// confirm access to needed methods
module_load_include('inc', 'node', 'node.pages', 'path', 'filter'); 

/**
 * hook_help entry-point function.
 * Let folks know what this is if they are clueless.
 *
 * @param string $path request.uri path.
 * @param array $arg pieces of uri split by '/'.
 * @return string HTML for module help.
 * @see hook_help
 */
function eximport_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/help#eximport":
      $output = '<p>'
              . t("To assist in the import of MediaWiki content.")
              . '</p>';
    break;
  }
  return $output;
}

/**
 * hook_permission entry-point function.
 * Add an eximport specific permission, for giggles.
 *
 * @return n/a.
 * @see hook_permission
 */
function eximport_permission() {
  return array(
    'administer import' =>  array(
      'title' => t('Administer eX Import'),
      'description' => t('Use caution.'),
    ),
  );
}

/**
 * hook_menu entry-point function.
 * Add an eximport specific routes.
 *
 * @return array $items Array of routes for this module.
 * @see hook_menu
 */
function eximport_menu() {
  $items = array();
  
  $items['admin/config/extension/import'] = array(
    'title' => 'Import Content',
    'description' => 'Tools for importing wiki data.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('eximport_admin_form'),
    'access arguments' => array('administer import')
    );
    
  return $items;
}

/**
 * Define the admin form.
 *
 * @param array $form form array.
 * @param array &$form_state Reference to array with the current form state.
 * @return array Form array.
 * @see forms_api_reference
 */
function eximport_admin_form($form, &$form_state) {

  $form['filename'] = array(
    '#type' => 'textfield',
    '#title' => t('File to import'),
    '#default_value' => 'import.xml',
    '#size' => 40,
    '#maxlength' => 80,
    '#description' => t("Filename of default import file."),
    '#required' => FALSE,
  );
  
  $form['submit'] = array('#type' => 'submit', '#value' => t('Import'));
  
  $form['rewrite'] = array('#type' => 'submit', '#value' => t('Update URLs'));
  
  $form['getmeta'] = array('#type' => 'submit', '#value' => t('Import Metadata'));
  
  return $form;
}

/**
 * Validate admin form input.
 *
 * @param array $form form array.
 * @param array &$form_state Reference to array with the current form state.
 * @return n/a
 * @see _form_validate
 */
function eximport_admin_form_validate($form, &$form_state) {
  
  switch ($form_state['values']['op']) {
    case 'Import':
      $filename = $form_state['values']['filename'];
      if ( ! preg_match('/\.(xml|atom)$/i', $filename)) {
        form_set_error('', t('A valid filename is required.'));
      } elseif ( ! eximport_verify_filename($filename) ) {
        form_set_error('', t('File must exist in import directory.'));
      }
      break;
    case 'Update URLs':
      break;
    case 'Import Metadata':
      break;
    default:
      form_set_error('', t('Invalid button pushed.'));
  }

  return;
}

/**
 * Given filename, return location of file.
 *
 * @param string $filename Input filename.
 * @return string Full path to file.
 */
function eximport_get_fullpath($filename) {
  $path_parts = array(DRUPAL_ROOT, 'import', $filename);
  return implode(DIRECTORY_SEPARATOR, $path_parts);
}

/**
 * Given filename, verify exists in file system.
 *
 * @param string $filename Input filename.
 * @return boolean True if file exists, FALSE otherwise.
 * @see _form_validate
 */
function eximport_verify_filename($filename) {
  $target = eximport_get_fullpath($filename);
  return file_exists($target);
}

/**
 * Process form after submission.
 *
 * @param array $form form array.
 * @param array &$form_state Reference to array with the current form state.
 * @return n/a
 * @see form_execute_handlers
 */
function eximport_admin_form_submit($form, &$form_state) {
  
  $cmd = $form_state['values']['op'];
  
  switch ($cmd) {
      case 'Import':
      $filename = $form_state['values']['filename'];
      list($total, $added, $errors) = eximport_import_from_file($filename);
      $cmd = "$filename Import";
      break;
    case 'Update URLs':
      list($total, $added, $errors) = eximport_rewrite_imported_urls();
      break;
    case 'Import Metadata':
      list($total, $added, $errors) = eximport_get_wiki_meta();
      break;
    default:
      form_set_error('', t('Invalid button pushed.'));
  }
  
  if ($errors) {
    $str = check_plain($cmd . ' failed: ' 
                         . $errors . ' errors out of ' 
                         . $total . ' revisions.');
    drupal_set_message($str, 'error');
  } else {
    $str = check_plain($cmd . ' successful. ' 
                         . $added . ' out of ' 
                         . $total . ' revisions.');
    drupal_set_message($str);
  }

  return;
}

/**
 * Create a Drupal node and revision from input.
 *
 * @param object $entry Object with data for new node.
 * @return boolean TRUE if successful, FALSE otherwise
 * @see node_save
 */
function eximport_node_create($entry) {
  $rc = FALSE;
  $nid = 0;
  $new = FALSE;
  
  // First, try to see if we've imported a node with the same link
  $path = path_load(array('alias' => $entry->old_link));
  if ($path) {
    $nid = $path['source'];
  }
  unset($path);
  
  // Construct the new node object.
  
  if ($nid) {
    // reset entity_load cache - be sure we have the latest version
    $node = node_load($nid, NULL, TRUE);
    $node->revision = '1';
  } else {
    $new = TRUE;
    $node = new stdClass();
    $node->type = $entry->type;
    node_object_prepare($node);
    $node->language = LANGUAGE_NONE;
    $node->created = $entry->created;
  }
  
  $node->uid = $entry->user->uid;
  $node->title = $entry->title;
  
  $node->changed = $entry->created;
  
  $node->body = $entry->body;
  
  $node->field_tags = $entry->field_tags;
  
  $saved_user = $GLOBALS['user'];
  drupal_save_session(FALSE);
  $GLOBALS['user'] = $entry->user;
  node_save($node);
  
  // fix timestamps
  db_query("UPDATE {node} SET changed = :changed WHERE nid = :nid",
              array(':changed' => $entry->created, ':nid' => $node->nid));
  db_query("UPDATE {node_revision} SET `timestamp` = :tstamp WHERE nid = :nid AND vid = :vid", 
              array(':tstamp' => $entry->created, ':nid' => $node->nid, ':vid' => $node->vid));
  
  // mark as published
  if ($entry->published) {
    $publish_fields = array('published_at' => $entry->created, 
                            'published_revision_id' => $node->vid);

    // record workflow  
    exworkflow_change_state($node, 
                            'published',// node status
                            null, // draft status
                            'published', // event status
                            $entry->user->uid, // user id
                            $entry->created, // workflow tstamp
                            $publish_fields);
  
  }
  
  $GLOBALS['user'] = $saved_user;
  drupal_save_session(TRUE);
  
  $nid = $node->nid;
  
  if ($nid and $new) {
    eximport_save_old_link($nid, $entry->old_link);
    $rc = TRUE;
  } elseif ($nid) {
    $rc = TRUE;
  }
  
  unset($node);
  unset($entry);
  
  return $rc;
}

/**
 * Create a Drupal node and revision from input.
 *
 * @param integer $nid Node ID.
 * @param string $old_link URL for old article location.
 * @see path_inc
 */
function eximport_save_old_link($nid, $old_link) {
  $path = array('alias' => $old_link, 'source' => "$nid");
  
  $exists = path_load(array('source' => $nid));
  if ($exists) {
    $path['pid'] = $exists['pid'];
  }
  
  path_save($path);
  return;
}

/**
 * Create a new content entry object from XML input.
 *
 * @param object $atom_entry SimpleXML Atom entry object.
 * @return object Generic content entry object
 */
function eximport_entry_create($atom_entry) {
  $entry = new stdClass();
  
  // default to article content-type
  $entry->type = 'article';
    
  // create our tag array
  $categories = array();
  $entry->published = FALSE;
  
  foreach ($atom_entry->category as $cat) {
    if ($cat['term'] == 'news') {
      // if it is news, change content-type
      $entry->type = 'news';
    } elseif ($cat['term'] == 'originalnews') {
      $entry->type = 'news';
    }
    
    if ($cat['term'] == 'published') {
       $entry->published = TRUE;
       continue;
    }
    
    $tid = 'autocreate';
    $term_name = (string)$cat['term'];
    $terms = taxonomy_get_term_by_name($term_name);
    
    if ($terms) {
      $term = array_shift($terms);
      if ($term) {
        $tid = $term->tid;
      }
    }
    
    $cat_entry = array('vid' => '1',
                       'tid' => $tid,
                       'name' => $term_name);
    $categories[] = $cat_entry;
  }
  
  $entry->field_tags = array(LANGUAGE_NONE => $categories);
  
  // author
  $entry->user = user_load_by_name((string)$atom_entry->author->name[0]);
  
  if (! $entry->user) {
    $entry->user = user_load_by_name('eXtension');
  }
  
  // duh
  $entry->title = (string)$atom_entry->title;
  
  // create our body array
  $teaser = eximport_get_teaser($atom_entry->content);
  $body = (string)$atom_entry->content;
  $entry->body = array(LANGUAGE_NONE =>
                  array(0 =>
                    array('summary' => $teaser,
                          'value' => $body,
                          'format' => filter_default_format()
                          )));
  
  $entry->created = strtotime($atom_entry->updated);
  
  $entry->old_link = (string)$atom_entry->link['href'];
  
  return $entry;
}

/**
 * Some existing eXtension articles have a teaser/summary embeded.
 * Pull out teaser from HTML to enable us to put in new node.
 *
 * @param string $content HTML content for a 'news' article.
 * @return string HTML for teaser content only
 */
function eximport_get_teaser($content) {
  $summary = "";
  if ( ! empty($content)) {
    $find_sum = '#<div\ id="summary"\ class="printme\ toc">(.*?)</div>#m';
  
    $matches = array();
    $found = preg_match($find_sum, $content, $matches);
  
    if ($found) {
      $summary = $matches[1];
    }
  }
  
  return $summary;
}

/**
 * Load content from Atom formatted XML file.
 *
 * @param string $filename Input filename with full path.
 * @return array Total number, number added, number errors.
 * @see SimpleXML
 */
function eximport_import_from_file($filename) {
  $added = 0;
  $errors = 0;
  
  $target = eximport_get_fullpath($filename);
  
  $xml = simplexml_load_file($target);
  
  $total = count($xml->entry);
  
  for ($i=0; $i < $total; $i++) {
    set_time_limit(30);
    $atom_entry = $xml->entry[$i];
    // use an intermediate object to reduce complexity and aid debugging
    $entry = eximport_entry_create($atom_entry);
    $nid = eximport_node_create($entry);
    if ($nid) {
      $added++;
    } else {
      $errors++;
    }
  }
  
  return array($total, $added, $errors);
}

/**
 * Process all revisions of imported nodes.
 *
 * @return array Total number, number added, number errors.
 * @see SimpleXML
 */
function eximport_rewrite_imported_urls() {
  // get imported node list (list of nids)
  $nids = _eximport_load_imported_node_list();
  
  $total = 0;
  $processed = 0;
  $errors = 0;
  // loop thru all nodes and get all revisions
  foreach ($nids as $nid) {
    // create fake node to load revision list
    $fakenode = new stdClass();
    $fakenode->nid = $nid;
    $revisions = node_revision_list($fakenode);
    $total += count($revisions);
    foreach ($revisions as $vid => $rev) {
      set_time_limit(30);
      $node = node_load($nid, $vid);
      $GLOBALS['eximport_nid'] = $node->nid;
      _eximport_rewrite_urls($node);
      eximport_node_update_revision($node);
      $processed++;
    }
  }
  return array($total, $processed, $errors);
}

function _eximport_load_imported_node_list() {
  return db_query("SELECT source 
             FROM url_alias 
             WHERE source RLIKE '^[[:digit:]]+$'")->fetchCol();
}

function _eximport_load_imported_node_data() {
  return db_query("SELECT source as nid, alias as orig_url 
             FROM url_alias 
             WHERE source RLIKE '^[[:digit:]]+$'")->fetchAssoc();
}

/**
 * Update the modified body and summary of a node.
 * WARNING: not using API, direct DB update.
 *
 * @param object $node Reference to a node object
 * @return N/A
 */
function eximport_node_update_revision(&$node) {
  $fields = array(
    'body_value' => $node->body[LANGUAGE_NONE][0]['value'],
    'body_summary' => $node->body[LANGUAGE_NONE][0]['summary']
  );
  
  // update in the revision history
  db_update('field_revision_body')
    ->fields($fields)
    ->condition('revision_id', $node->vid)
    ->execute();
  
  // also update latest version
  db_update('field_data_body')
    ->fields($fields)
    ->condition('revision_id', $node->vid)
    ->execute();
  
  return;
}

/**
 * Rewrite the URLs in the body and summary of a node.
 *
 * @param object $node Reference to a node object
 * @return N/A
 */
function _eximport_rewrite_urls(&$node) {
  $html = new simple_html_dom();
  $html->set_callback('eximport_process_element');
  
  // first, the body html
  // using outertext() instead of save() to trigger callback
  $html->load($node->body[LANGUAGE_NONE][0]['value']);
  $node->body[LANGUAGE_NONE][0]['value'] = $html->root->outertext();
  
  // then the summary/teaser html
  $html->load($node->body[LANGUAGE_NONE][0]['summary']);
  $node->body[LANGUAGE_NONE][0]['summary'] = $html->root->outertext();
  
  unset($html);
  return;
}

/**
 * Rewrite the URLs in an anchor element.
 *
 * @param object $element Reference to an DOM element object
 * @return N/A
 */
function eximport_process_element($element) {
  $orig_url = '';
  
  switch ($element->tag) {
    case 'a':
      if ( empty($element->href) ) {
        return;
      }
      $orig_url = $element->href;
      break;
    case 'img':
      $orig_url = $element->src;
      break;
    default:
      return;
  }

  $url = parse_url($orig_url);
  
  // parseable URL?  note, didn't say valid
  if ($url === FALSE) {
    // bogus, zap the element, leaving the innards
    $element->outertext = $element->innertext;
    return;
  }
  
  eximport_process_url($url);
  
  if ( empty($url) ) {
    // need to zap it
    $element->outertext = $element->innertext;
    return;
  } else {
    $orig_url = http_build_url($url);
  }
  
  switch ($element->tag) {
    case 'a':
      $element->href = $orig_url;
      break;
    case 'img':
      $element->src = $orig_url;
      break;
  }
  return;
}

/**
 * Rewrite the URLs.
 *
 * @param array $url Reference to an array for an URL via parse_url
 * @return N/A
 */
function eximport_process_url(&$url) {
  // at this point we have full URLs, let's see what to do with them
  if (! isset($url['path'])) {
    return;
  }
  
  // dvm(array("original url", $url));
  
  // get the old URL for the current node
  $current_node_path = path_load(array('source' => $GLOBALS['eximport_nid']));
  $current_node_url = $current_node_path['alias'];
  
  // tells us where we are running
  $my_url = parse_url(http_build_url());
  
  if (! empty($url['scheme'])) {
    // only interested in http
    if ($url['scheme'] != 'http') {
      return;
    }
  } else {
    $new_url = array();
    // handle the relative URLs by fully specifying them
    // using the scheme/host/port from the old URL for this node
    http_build_url($current_node_url, $url, HTTP_URL_REPLACE, $new_url);
    $url = $new_url;
  }
  
  $path = $url['path'];
  $matches = array();
  $modified = FALSE;
  if (preg_match('#^/wiki/Category\:(.+)#', $path, $matches)) {
    $tag = $matches[1];
    $tag = str_replace('_', ' ', $tag);
    // map to taxonomy/tag URL - need term id
    $terms = taxonomy_get_term_by_name($tag);
    if ($terms) {
      $term = array_shift($terms);
      if ($term) {
        $path = '/taxonomy/term/' . $term->tid;
        $modified = TRUE;
      }
    } else {
      // not found, zap link
      $url = NULL;
      return;
    }
  } elseif (preg_match('#^/mediawiki/files/(.*)#', $path, $matches)) {
    // replace 'mediawiki/files' w/ 'sites/default/files/w'
    $path = '/sites/default/files/w/' . $matches[1];
    $modified = TRUE;
  } elseif (preg_match('#^/learninglessons/(.*)#', $path, $matches)) {
    // our work is done, just need to update host below
    $url['host'] = 'www.extension.org';
    unset($url['port']);
  } elseif (preg_match('#^/wiki/User\:(.*)#', $path, $matches)) {
    $exuser = strtolower($matches[1]);
    $url['scheme'] = 'https';
    $url['host'] = 'people.extension.org';
    unset($url['port']);
    $path = '/' . $exuser;
  } elseif (preg_match('#^/wiki/File\:(.*)#', $path, $matches)) {
    // replace 'File:blah' w/ 'sites/default/files/w'
    $fname = html_entity_decode($matches[1]);
    $fname = str_replace(' ', '_', $fname);
    $hash = md5($fname);
    $fname = htmlentities($fname);
    $path = '/sites/default/files/w/'
          . substr($hash, 0, 1) . '/'
          . substr($hash, 0, 2) . '/'
          . $fname;
    $modified = TRUE;
  } elseif (preg_match('#^/wiki/(Image|Calendars|Talk)\:.*#', $path)) {
    // zap it
    $url = NULL;
    return;
  } else {
    // see if it is something we imported, zap the fragment for compare
    $uri = http_build_url($url, array(), HTTP_URL_STRIP_FRAGMENT);
    $new_path = path_load(array('alias' => $uri));
    if ($new_path) {
      $nid = $new_path['source'];
      $path = '/node/' . $nid;
      $modified = TRUE;
    }
  }
  
  $url['path'] = $path;
  
  if ($modified) {
    $url['host'] = $my_url['host'];
    if (isset($my_url['port'])) {
      $url['port'] = $my_url['port'];
    }
  }
  
  // dvm(array("modified url", $url));
  return;
}

/**
 * Try to load existing BettaMeta metadata into drupal fields
 * TODO: NEED TO ONLY OPERATE ON NODES THAT COME FROM THE COP WIKI (will also operate on imported about content and fail)
 *
 * @return array Total number, number added, number errors.
 * @see SimpleXML
 */
function eximport_get_wiki_meta() {
  // get imported node list
  $path_list = _eximport_load_imported_node_data();
  
  $total = count($path_list);
  $processed = 0;
  $errors = 0;
  
  dvm(array("original url", $path_list));
  
  // loop thru all nodes and see if metadata exists
  foreach ($path_list as $path) {
    set_time_limit(30); // resets the php process timer for every iteration so that the script doesn't blow up and stop
    $xml_url = $path->orig_url . "?action=meta&mode=feed";
    $xml = new simple_html_dom();
    $rc = $xml->load($xml_url);
    if ($rc === FALSE) {
      $errors++;
    } else {
      // we have data, now squeeze it in
      $node = node_load($path->nid);
      // @JER - need to figure out how to add data from xml into drupal
      // data structures
      
      $processed++;
    }
  }
  
  return array($total, $processed, $errors);
}